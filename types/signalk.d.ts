/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Root schema of Signal K. Contains the list of vessels plus a reference to the local boat (also contained in the vessels list).
 */
export type SignalK = {
  [k: string]: unknown;
} & {
  /**
   * This holds the context (prefix + UUID, MMSI or URL in dot notation) of the server's self object.
   */
  self: string;
  /**
   * A wrapper object for vessel objects, each describing vessels in range, including this vessel.
   */
  vessels?: {
    [k: string]: Vessel;
  };
  /**
   * A wrapper object for aircraft, primarily intended for SAR aircraft in relation to marine search and rescue. For clarity about seaplanes etc, if it CAN fly, its an aircraft.
   */
  aircraft?: {
    [k: string]: Aircraft;
  };
  /**
   * A wrapper object for Aids to Navigation (aton's)
   */
  aton?: {
    [k: string]: AidToNavigation;
  };
  /**
   * A wrapper object for Search And Rescue (SAR) MMSI's usied in transponders. MOB, EPIRBS etc
   */
  sar?: {
    [k: string]: SearchAndRescueBeacons;
  };
  sources?: Sources;
  resources?: Resources;
  /**
   * Version of the schema and APIs that this data is using in Canonical format i.e. V1.5.0.
   */
  version: string;
  [k: string]: unknown;
};
/**
 * This regex pattern is used for validation of an MMSI or Signal K UUID identifier for the vessel. Examples: urn:mrn:imo:mmsi:230099999 urn:mrn:signalk:uuid:c0d79334-4e25-4245-8892-54e8ccc8021d
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^urn:mrn:(imo:mmsi:[2-7][0-9]{8}$|signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$))|^(http(s?):.*|mailto:.*|tel:(\+?)[0-9]{4,})$".
 */
export type Vessel = {
  [k: string]: unknown;
} & {
  /**
   * URL based identity of the vessel, if available.
   */
  url?: string;
  /**
   * MMSI number of the vessel, if available.
   */
  mmsi?: string;
  /**
   * MMSI number of the mothership of this vessel, if available.
   */
  mothershipMmsi?: string;
  /**
   * A unique Signal K flavoured maritime resource identifier, assigned by the server.
   */
  uuid?: string;
  /**
   * The common name of the vessel
   */
  name?: string;
  /**
   * The country of ship registration, or flag state of the vessel
   */
  flag?: string;
  /**
   * The home port of the vessel
   */
  port?: string;
  /**
   * The various registrations of the vessel.
   */
  registrations?: {
    /**
     * The IMO number of the vessel.
     */
    imo?: string;
    /**
     * The national registration number of the vessel.
     */
    national?: {
      /**
       * This regex pattern is used for validating the identifier for the registration
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "(^[A-Za-z0-9_-]+$)".
       */
      [k: string]: {
        /**
         * The ISO 3166-2 country code.
         */
        country?: string;
        /**
         * The registration code
         */
        registration?: string;
        /**
         * The registration description
         */
        description?: string;
        [k: string]: unknown;
      };
    };
    /**
     * A local or state registration number of the vessel.
     */
    local?: {
      /**
       * This regex pattern is used for validating the identifier for the registration
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "(^[A-Za-z0-9_-]+$)".
       */
      [k: string]: {
        /**
         * The registration code
         */
        registration?: string;
        /**
         * The registration description
         */
        description?: string;
        [k: string]: unknown;
      };
    };
    /**
     * Other registration or permits for the vessel.
     */
    other?: {
      /**
       * This regex pattern is used for validating the identifier for the registration
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "(^[A-Za-z0-9_-]+$)".
       */
      [k: string]: {
        /**
         * The registration code
         */
        registration?: string;
        /**
         * The registration description
         */
        description?: string;
        [k: string]: unknown;
      };
    };
    [k: string]: unknown;
  };
  communication?: Communication;
  environment?: Environment;
  navigation?: Navigation;
  propulsion?: Propulsion;
  electrical?: Electrical;
  notifications?: Notifications;
  steering?: Steering;
  tanks?: Tanks;
  design?: Design;
  sails?: Sails;
  sensors?: Sensors;
  performance?: Performance;
  [k: string]: unknown;
};
/**
 * Current outside air temperature
 */
export type NumberValue = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Unix style permissions, often written in `owner:group:other` form, `-rw-r--r--`
 */
export type _ModeSchema = number;
/**
 * The owner of this resource.
 */
export type _OwnerSchema = string;
/**
 * The group owning this resource.
 */
export type _GroupSchema = string;
/**
 * A display name for this value. This is shown on the gauge and should not include units.
 */
export type DisplayNameSchema = string;
/**
 * A long name for this value.
 */
export type LongNameSchema = string;
/**
 * A short name for this value.
 */
export type ShortNameSchema = string;
/**
 * Description of the SK path.
 */
export type DescriptionSchema = string;
/**
 * List of permissible values
 */
export type PermissibleValues = unknown[];
/**
 * gaugeType is deprecated. The type of gauge necessary to display this value.
 */
export type GaugeTypeSchema = string;
/**
 * Gives details of the display scale against which the value should be displayed
 */
export type ScaleToDisplay =
  | {
      lower: unknown;
      upper: unknown;
    }
  | {
      lower: unknown;
      upper: unknown;
      type: "linear" | "squareroot" | "logarithmic";
    }
  | {
      lower: unknown;
      upper: unknown;
      type: "power";
      power: unknown;
    };
/**
 * The (derived) SI unit of this value.
 */
export type UnitsSchema = string;
/**
 * The timeout in (fractional) seconds after which this data is invalid.
 */
export type Timeout = number;
/**
 * The method to use to raise the alert. An alert is an event that should be known
 */
export type AlertMethod = ("visual" | "sound")[];
/**
 * The method to use to raise the warning. A warning is an unexpected event that may require attention
 */
export type WarnMethod = ("visual" | "sound")[];
/**
 * The method to use to raise the alarm. An alarm requires immediate attention, eg no oil pressure
 */
export type AlarmMethod = ("visual" | "sound")[];
/**
 * The method to use to raise an emergency. An emergency is an immediate danger to life or vessel
 */
export type EmergencyMethod = ("visual" | "sound")[];
/**
 * The lowest number in this zone
 */
export type Lower = number;
/**
 * The highest value in this zone
 */
export type Upper = number;
/**
 * The alarm state when the value is in this zone.
 */
export type AlarmState = "nominal" | "normal" | "alert" | "warn" | "alarm" | "emergency";
/**
 * The message to display for the alarm.
 */
export type Message = string;
/**
 * The zones defining the range of values for this signalk value.
 */
export type ZonesSchema = Zone[];
/**
 * Current outside dew point temperature
 */
export type NumberValue1 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current outside apparent wind chill temperature
 */
export type NumberValue2 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current outside theoretical wind chill temperature
 */
export type NumberValue3 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current outside heat index temperature
 */
export type NumberValue4 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current outside air ambient pressure
 */
export type NumberValue5 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * DEPRECATED: use relativeHumidity
 */
export type NumberValue6 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current outside air relative humidity
 */
export type NumberValue7 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current outside air density
 */
export type NumberValue8 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current outside ambient light flux.
 */
export type NumberValue9 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Temperature
 */
export type NumberValue10 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current heat index temperature in zone
 */
export type NumberValue11 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Pressure in zone
 */
export type NumberValue12 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Relative humidity in zone
 */
export type NumberValue13 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * DEPRECATED: use dewPointTemperature
 */
export type NumberValue14 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Dewpoint in zone
 */
export type NumberValue15 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Air density in zone
 */
export type NumberValue16 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Illuminance in zone
 */
export type NumberValue17 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current water temperature
 */
export type NumberValue18 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Water salinity
 */
export type NumberValue19 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Depth below keel
 */
export type NumberValue20 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Depth below Transducer
 */
export type NumberValue21 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Depth from surface
 */
export type NumberValue22 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Depth from the transducer to the bottom of the keel
 */
export type NumberValue23 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Depth transducer is below the water surface
 */
export type NumberValue24 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Direction and strength of current affecting the vessel
 */
export type Current = CommonValueFields & {
  value?: {
    /**
     * The speed component of the water current vector
     */
    drift?: number;
    /**
     * The direction component of the water current vector referenced to true (geographic) north
     */
    setTrue?: number;
    /**
     * The direction component of the water current vector referenced to magnetic north
     */
    setMagnetic?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * The speed component of the water current vector
         */
        drift?: number;
        /**
         * The direction component of the water current vector referenced to true (geographic) north
         */
        setTrue?: number;
        /**
         * The direction component of the water current vector referenced to magnetic north
         */
        setMagnetic?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * Next high tide height  relative to lowest astronomical tide (LAT/Chart Datum)
 */
export type NumberValue25 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The current tide height  relative to lowest astronomical tide (LAT/Chart Datum)
 */
export type NumberValue26 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The next low tide height relative to lowest astronomical tide (LAT/Chart Datum)
 */
export type NumberValue27 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Vertical movement of the vessel due to waves
 */
export type NumberValue28 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Apparent wind angle, negative to port
 */
export type NumberValue29 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * True wind angle based on speed over ground, negative to port
 */
export type NumberValue30 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * True wind angle based on speed through water, negative to port
 */
export type NumberValue31 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The angle the wind needs to shift to raise an alarm
 */
export type NumberValue32 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The wind direction relative to true north
 */
export type NumberValue33 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The wind direction relative to magnetic north
 */
export type NumberValue34 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Wind speed over water (as calculated from speedApparent and vessel's speed through water)
 */
export type NumberValue35 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Wind speed over ground (as calculated from speedApparent and vessel's speed over ground)
 */
export type NumberValue36 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Apparent wind speed
 */
export type NumberValue37 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Milliseconds since the UNIX epoch (1970-01-01 00:00:00)
 */
export type EpochTime = number;
/**
 * Onboard timezone offset from UTC in hours and minutes (-)hhmm. +ve means east of Greenwich. For use by UIs
 */
export type TimezoneOffset = number;
/**
 * Onboard timezone offset as listed in the IANA timezone database (tz database)
 */
export type IANATimezoneNationalRegion = string;
/**
 * Course over ground (magnetic)
 */
export type NumberValue38 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Course over ground (true)
 */
export type NumberValue39 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The distance from the vessel's present position to the closest point on a line (track) between previousPoint and nextPoint. A negative number indicates that the vessel is currently to the left of this line (and thus must steer right to compensate), a positive number means the vessel is to the right of the line (steer left to compensate).
 */
export type NumberValue40 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The bearing of a line between previousPoint and nextPoint, relative to true north.
 */
export type NumberValue41 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The bearing of a line between previousPoint and nextPoint, relative to magnetic north.
 */
export type NumberValue42 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The estimated time of arrival at the end of the current route
 */
export type DatetimeValue = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesDatetimeValue;
  };
  [k: string]: unknown;
};
/**
 * The time this route was activated
 */
export type DatetimeValue1 = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesDatetimeValue;
  };
  [k: string]: unknown;
};
/**
 * The distance in meters between the vessel's present position and the nextPoint
 */
export type NumberValue43 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The bearing of a line between the vessel's current position and nextPoint, relative to true north
 */
export type NumberValue44 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The bearing of a line between the vessel's current position and nextPoint, relative to magnetic north
 */
export type NumberValue45 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The velocity component of the vessel towards the nextPoint
 */
export type NumberValue46 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Time in seconds to reach nextPoint's perpendicular) with current speed & direction
 */
export type NumberValue47 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The position of nextPoint in two dimensions
 */
export type Position = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * The estimated time of arrival at nextPoint position
 */
export type DatetimeValue2 = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesDatetimeValue;
  };
  [k: string]: unknown;
};
/**
 * The distance in meters between previousPoint and the vessel's present position
 */
export type NumberValue48 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The position of lastPoint in two dimensions
 */
export type Position1 = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * Position of starboard start mark
 */
export type Position2 = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * Position of port start mark
 */
export type Position3 = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * The current distance to the start line
 */
export type NumberValue49 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Time left before start
 */
export type NumberValue50 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Time to arrive at the start line on port, turning downwind
 */
export type NumberValue51 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Time to arrive at the start line on port, turning upwind
 */
export type NumberValue52 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Time to arrive at the start line on starboard, turning downwind
 */
export type NumberValue53 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Time to arrive at the start line on starboard, turning upwind
 */
export type NumberValue54 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The current distance to the layline
 */
export type NumberValue55 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The time to the layline at current speed and heading
 */
export type NumberValue56 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The current distance to the layline
 */
export type NumberValue57 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The time to the layline at current speed and heading
 */
export type NumberValue58 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The magnetic variation (declination) at the current position that must be added to the magnetic heading to derive the true heading. Easterly variations are positive and Westerly variations are negative (in Radians).
 */
export type NumberValue59 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Seconds since the 1st Jan 1970 that the variation calculation was made
 */
export type NumberValue60 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Common name of the Destination, eg 'Fiji', also used in ais messages
 */
export type StringValue = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesStringValue;
  };
  [k: string]: unknown;
};
/**
 * Expected time of arrival at destination waypoint
 */
export type DatetimeValue3 = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesDatetimeValue;
  };
  [k: string]: unknown;
};
/**
 * UUID of destination waypoint
 */
export type StringValue1 = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesStringValue;
  };
  [k: string]: unknown;
};
/**
 * Number of satellites
 */
export type NumberValue61 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Altitude of antenna
 */
export type NumberValue62 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Horizontal Dilution of Precision
 */
export type NumberValue63 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Positional Dilution of Precision
 */
export type NumberValue64 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Difference between WGS84 earth ellipsoid and mean sea level
 */
export type NumberValue65 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Age of DGPS data
 */
export type NumberValue66 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * ID of DGPS base station
 */
export type NumberValue67 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current magnetic heading of the vessel, equals 'headingCompass adjusted for magneticDeviation'
 */
export type NumberValue68 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Magnetic deviation of the compass at the current headingCompass
 */
export type NumberValue69 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current magnetic heading received from the compass. This is not adjusted for magneticDeviation of the compass
 */
export type NumberValue70 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The current true north heading of the vessel, equals 'headingMagnetic adjusted for magneticVariation'
 */
export type NumberValue71 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The position of the vessel in 2 or 3 dimensions (WGS84 datum)
 */
export type Position4 = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * Vessel attitude: roll, pitch and yaw
 */
export type Attitude = CommonValueFields & {
  value?: {
    /**
     * Vessel roll, +ve is list to starboard
     */
    roll?: number;
    /**
     * Pitch, +ve is bow up
     */
    pitch?: number;
    /**
     * Yaw, +ve is heading change to starboard
     */
    yaw?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Vessel roll, +ve is list to starboard
         */
        roll?: number;
        /**
         * Pitch, +ve is bow up
         */
        pitch?: number;
        /**
         * Yaw, +ve is heading change to starboard
         */
        yaw?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * Rate of turn (+ve is change to starboard). If the value is AIS RIGHT or LEFT, set to +-0.0206 rads and add warning in notifications
 */
export type NumberValue72 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Vessel speed over ground. If converting from AIS 'HIGH' value, set to 102.2 (Ais max value) and add warning in notifications
 */
export type NumberValue73 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Vessel speed through the water
 */
export type NumberValue74 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Transverse speed through the water (Leeway)
 */
export type NumberValue75 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Longitudinal speed through the water
 */
export type NumberValue76 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Leeway Angle derived from the longitudinal and transverse speeds through the water
 */
export type NumberValue77 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Total distance traveled
 */
export type NumberValue78 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Total distance traveled on this trip / since trip reset
 */
export type NumberValue79 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Trip log reset time
 */
export type DatetimeValue4 = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesDatetimeValue;
  };
  [k: string]: unknown;
};
/**
 * Current navigational state of the vessel
 */
export type State = CommonValueFields & {
  value?:
    | "not under command"
    | "anchored"
    | "moored"
    | "sailing"
    | "motoring"
    | "towing < 200m"
    | "towing > 200m"
    | "pushing"
    | "fishing"
    | "fishing-hampered"
    | "trawling"
    | "trawling-shooting"
    | "trawling-hauling"
    | "pilotage"
    | "not-under-way"
    | "aground"
    | "restricted manouverability"
    | "restricted manouverability towing < 200m"
    | "restricted manouverability towing > 200m"
    | "restricted manouverability underwater operations"
    | "constrained by draft"
    | "mine clearance"
    | "Reserved for future amendment of Navigational Status for HSC"
    | "Reserved for future amendment of Navigational Status for WIG"
    | "Reserved for future use-11"
    | "Reserved for future use-12"
    | "Reserved for future use-13"
    | "Reserved for future use-14"
    | "not defined (example)";
  [k: string]: unknown;
};
/**
 * Radius of anchor alarm boundary. The distance from anchor to the center of the boat
 */
export type NumberValue80 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current distance to anchor
 */
export type NumberValue81 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The actual anchor position of the vessel in 3 dimensions, probably an estimate at best
 */
export type Position5 = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * Engine revolutions (x60 for RPM)
 */
export type NumberValue82 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Engine temperature
 */
export type NumberValue83 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Oil temperature
 */
export type NumberValue84 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Oil pressure
 */
export type NumberValue85 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Alternator voltage
 */
export type NumberValue86 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Total running time for engine (Engine Hours in seconds)
 */
export type NumberValue87 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Coolant temperature
 */
export type NumberValue88 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Coolant pressure
 */
export type NumberValue89 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Engine boost (turbo, supercharger) pressure
 */
export type NumberValue90 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Intake manifold temperature
 */
export type NumberValue91 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Engine load ratio, 0<=ratio<=1, 1 is 100%
 */
export type NumberValue92 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Engine torque ratio, 0<=ratio<=1, 1 is 100%
 */
export type NumberValue93 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Gear ratio, engine rotations per propeller shaft rotation
 */
export type NumberValue94 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Oil temperature
 */
export type NumberValue95 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Oil pressure
 */
export type NumberValue96 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Trim/tilt state, 0<=ratio<=1, 1 is 100% up
 */
export type NumberValue97 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Current thrust angle for steerable drives, +ve is thrust to Starboard
 */
export type NumberValue98 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Used fuel since last reset. Resetting is at user discretion
 */
export type NumberValue99 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Fuel pressure
 */
export type NumberValue100 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Fuel rate  of consumption
 */
export type NumberValue101 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Economy fuel rate of consumption
 */
export type NumberValue102 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Average fuel rate of consumption
 */
export type NumberValue103 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Exhaust temperature
 */
export type NumberValue104 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Batteries, one or many, within the vessel
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export type BatteryKeyedByInstanceId = ElectricalID & DCQualities;
/**
 * Data should be of type number.
 */
export type NumberValue105 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue106 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Temperature measured within or on the device
 */
export type Temperature = NumberValue105 & {
  /**
   * Upper operational temperature limit
   */
  warnUpper?: number;
  /**
   * Lower operational temperature limit
   */
  warnLower?: number;
  /**
   * Upper fault temperature limit - device may disable/disconnect
   */
  faultUpper?: number;
  /**
   * Lower fault temperature limit - device may disable/disconnect
   */
  faultLower?: number;
  [k: string]: unknown;
};
/**
 * DC to AC inverter, one or many, within the vessel
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export type Inverter = ElectricalID;
/**
 * Battery charger
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export type Charger = ElectricalID & DCQualities & ChargerQualities;
/**
 * Data should be of type number.
 */
export type NumberValue107 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue108 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Mechanically driven alternator, includes dynamos
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export type Alternator = ElectricalID & DCQualities & ChargerQualities;
/**
 * Photovoltaic charging devices
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export type Solar = ElectricalID & DCQualities & ChargerQualities;
/**
 * AC Bus, one or many, within the vessel
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export type ACBusKeyedByInstanceId = ElectricalID;
/**
 * Man overboard
 */
export type Notification = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * The alarm state when the value is in this zone.
 */
export type AlarmState1 = "nominal" | "normal" | "alert" | "warn" | "alarm" | "emergency";
/**
 * Fire onboard
 */
export type Notification1 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel is sinking
 */
export type Notification2 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel is flooding
 */
export type Notification3 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * In collision with another vessel or object
 */
export type Notification4 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel grounding
 */
export type Notification5 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel is listing
 */
export type Notification6 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel is adrift
 */
export type Notification7 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Under attack or danger from pirates
 */
export type Notification8 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Abandon ship
 */
export type Notification9 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
export type Notification10 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue109 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue110 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue111 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue112 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue113 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue114 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue115 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue116 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue117 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue118 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue119 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue120 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue121 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue122 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue123 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue124 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue125 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue126 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue127 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The preferred extinguishant to douse a fire in this tank
 */
export type StringValue2 = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesStringValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue128 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * The draft of the vessel
 */
export type Draft = CommonValueFields;
/**
 * The various lengths of the vessel
 */
export type Length = CommonValueFields;
/**
 * Information about the vessel's keel
 */
export type Keel = CommonValueFields;
/**
 * Data should be of type number.
 */
export type NumberValue129 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue130 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Information about the vessel's rigging
 */
export type Rigging = CommonValueFields;
/**
 * Data should be of type number.
 */
export type NumberValue131 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue132 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue133 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue134 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * AIS transponder class in sensors.ais.class, A or B
 */
export type StringValue3 = CommonValueFields & {
  value?: string;
  values?: {
    [k: string]: ValuesStringValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue135 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue136 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue137 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue138 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue139 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue140 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue141 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue142 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue143 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue144 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue145 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue146 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue147 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue148 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * Data should be of type number.
 */
export type NumberValue149 = CommonValueFields & {
  value?: number;
  values?: {
    [k: string]: ValuesNumberValue;
  };
  [k: string]: unknown;
};
/**
 * This regex pattern is used for validation of an MMSI or Signal K UUID identifier for the aircraft. Examples: urn:mrn:imo:mmsi:111099999 urn:mrn:signalk:uuid:c0d79334-4e25-4245-8892-54e8ccc8021d
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^urn:mrn:(imo:mmsi:1[0-9]{8}$|signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$))|^(http(s?):.*|mailto:.*|tel:(\+?)[0-9]{4,})$".
 */
export type Aircraft = {
  [k: string]: unknown;
} & {
  /**
   * URL based identity of the aircraft, if available.
   */
  url?: string;
  /**
   * MMSI number of the aircraft, if available.
   */
  mmsi?: string;
  /**
   * A unique Signal K flavoured maritime resource identifier, assigned by the server.
   */
  uuid?: string;
  /**
   * The country of aircraft registration, or flag state of the aircraft
   */
  flag?: string;
  /**
   * The home base of the aircraft
   */
  base?: string;
  /**
   * The various registrations of the aircraft.
   */
  registrations?: {
    /**
     * The IMO number of the aircraft.
     */
    imo?: string;
    /**
     * The national registration number of the aircraft.
     */
    national?: {
      /**
       * This regex pattern is used for validating the identifier for the registration
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "(^[A-Za-z0-9_-]+$)".
       */
      [k: string]: {
        /**
         * The ISO 3166-2 country code.
         */
        country?: string;
        /**
         * The registration code
         */
        registration?: string;
        /**
         * The registration description
         */
        description?: string;
        [k: string]: unknown;
      };
    };
    /**
     * Other registration or permits for the aircraft.
     */
    other?: {
      /**
       * This regex pattern is used for validating the identifier for the registration
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "(^[A-Za-z0-9_-]+$)".
       */
      [k: string]: {
        /**
         * The registration code
         */
        registration?: string;
        /**
         * The registration description
         */
        description?: string;
        [k: string]: unknown;
      };
    };
    [k: string]: unknown;
  };
  communication?: Communication1;
  environment?: Environment1;
  navigation?: Navigation1;
  notifications?: Notifications1;
  design?: Design1;
  sensors?: Sensors1;
  [k: string]: unknown;
};
/**
 * This regex pattern is used for validation of an MMSI or Signal K UUID identifier for the aid to navigation. Examples: urn:mrn:imo:mmsi:991099999 urn:mrn:signalk:uuid:c0d79334-4e25-4245-8892-54e8ccc8021d
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^urn:mrn:(imo:mmsi:99[0-9]{7}$|signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$))|^(http(s?):.*|mailto:.*|tel:(\+?)[0-9]{4,})$".
 */
export type AidToNavigation = {
  [k: string]: unknown;
} & {
  /**
   * URL based identity of the aid to navigation, if available.
   */
  url?: string;
  /**
   * MMSI number of the aid to navigation, if available.
   */
  mmsi?: string;
  /**
   * A unique Signal K flavoured maritime resource identifier, assigned by the server.
   */
  uuid?: string;
  /**
   * The aton type
   */
  atonType?: CommonValueFields & {
    value?: {
      /**
       * The aton type number
       */
      id?: number;
      /**
       * The aton type name
       */
      name?: string;
      [k: string]: unknown;
    } & (
      | {id: 1; name: "Reference Point"}
      | {id: 2; value: "RACON"}
      | {id: 3; name: "Fixed Structure Off Shore"}
      | {id: 4; name: "Emergency Wreck Marking Buoy"}
      | {id: 5; name: "Light, Without Sectors"}
      | {id: 6; name: "Light, With Sectors"}
      | {id: 7; name: "Leading Light Front"}
      | {id: 8; name: "Leading Light Rear"}
      | {id: 9; name: "Beacon, Cardinal N"}
      | {id: 10; name: "Beacon, Cardinal E"}
      | {id: 11; name: "Beacon, Cardinal S"}
      | {id: 12; name: "Beacon, Cardinal W"}
      | {id: 13; name: "Beacon, Port Hand"}
      | {id: 14; name: "Beacon, Starboard Hand"}
      | {id: 15; name: "Beacon, Preferred Channel Port Hand"}
      | {id: 16; name: "Beacon, Preferred Channel Starboard Hand"}
      | {id: 17; name: "Beacon, Isolated Danger"}
      | {id: 18; name: "Beacon, Safe Water"}
      | {id: 19; name: "Beacon, Special Mark"}
      | {id: 20; name: "Cardinal Mark N"}
      | {id: 21; name: "Cardinal Mark E"}
      | {id: 22; name: "Cardinal Mark S"}
      | {id: 23; name: "Cardinal Mark W"}
      | {id: 24; name: "Port Hand Mark"}
      | {id: 25; name: "Starboard Hand Mark"}
      | {id: 26; name: "Preferred Channel Port Hand"}
      | {id: 27; name: "Preferred Channel Starboard Hand"}
      | {id: 28; name: "Isolated danger"}
      | {id: 29; name: "Safe Water"}
      | {id: 30; name: "Special Mark"}
      | {id: 31; name: "Light Vessel/LANBY/Rigs"}
    );
    [k: string]: unknown;
  };
  /**
   * The aton name
   */
  name?: string;
  communication?: Communication2;
  environment?: Environment2;
  navigation?: Navigation2;
  notifications?: Notifications2;
  design?: Design2;
  sensors?: Sensors2;
  [k: string]: unknown;
};
/**
 * This regex pattern is used for validation of an MMSI or Signal K UUID identifier for the aid to navigation. Examples: urn:mrn:imo:mmsi:972099999 urn:mrn:signalk:uuid:c0d79334-4e25-4245-8892-54e8ccc8021d
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "(^urn:mrn:(imo:mmsi:97[0-9]{7}$|signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$))|^(http(s?):.*|mailto:.*|tel:(\+?)[0-9]{4,})$".
 */
export type SearchAndRescueBeacons = {
  [k: string]: unknown;
} & {
  /**
   * URL based identity of the aid to navigation, if available.
   */
  url?: string;
  /**
   * MMSI number of the aid to navigation, if available.
   */
  mmsi?: string;
  /**
   * A unique Signal K flavoured maritime resource identifier, assigned by the server.
   */
  uuid?: string;
  communication?: Communication3;
  navigation?: Navigation3;
  notifications?: Notifications3;
  [k: string]: unknown;
};
/**
 * Man overboard
 */
export type Notification11 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Fire onboard
 */
export type Notification12 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel is sinking
 */
export type Notification13 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel is flooding
 */
export type Notification14 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * In collision with another vessel or object
 */
export type Notification15 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel grounding
 */
export type Notification16 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel is listing
 */
export type Notification17 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Vessel is adrift
 */
export type Notification18 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Under attack or danger from pirates
 */
export type Notification19 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Abandon ship
 */
export type Notification20 = CommonValueFields & {
  value?: {
    /**
     * Method to use to raise notifications
     */
    method: ("visual" | "sound")[];
    state: AlarmState1;
    /**
     * Message to display or speak
     */
    message: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/**
 * Position of a corner of the chart
 */
export type Position6 = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * A single position
 *
 * @minItems 2
 */
export type Position7 = [number, number];
/**
 * An array of positions
 */
export type PositionArray = Position7[];
/**
 * Position related to note. Alternative to region or geohash
 */
export type Position8 = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};
/**
 * An array of linear rings
 */
export type Polygon1 = (PositionArray & {
  [k: string]: unknown;
})[];
/**
 * The position in 3 dimensions
 */
export type Position9 = CommonValueFields & {
  value?: {
    /**
     * Longitude
     */
    longitude: number;
    /**
     * Latitude
     */
    latitude: number;
    /**
     * Altitude
     */
    altitude?: number;
    [k: string]: unknown;
  };
  values?: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      pgn?: number;
      sentence?: string;
      value?: {
        /**
         * Longitude
         */
        longitude?: number;
        /**
         * Latitude
         */
        latitude?: number;
        /**
         * Altitude
         */
        altitude?: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
};

/**
 * Communication data including Radio, Telephone, E-Mail, etc.
 */
export interface Communication {
  /**
   * Callsign for VHF communication
   */
  callsignVhf?: string;
  /**
   * Callsign for HF communication
   */
  callsignHf?: string;
  /**
   * Phone number of skipper
   */
  phoneNumber?: string;
  /**
   * Email address to be used for HF email (Winmail, Airmail, Sailmail)
   */
  emailHf?: string;
  /**
   * Regular email for the skipper
   */
  email?: string;
  /**
   * Satellite phone number for vessel.
   */
  satPhoneNumber?: string;
  /**
   * Full name of the skipper of the vessel.
   */
  skipperName?: string;
  /**
   * Array with the names of the crew
   */
  crewNames?: [] | [string];
  [k: string]: unknown;
}
/**
 * Environmental data measured locally including Depth, Wind, Temp, etc.
 */
export interface Environment {
  /**
   * Environmental conditions outside of the vessel's hull
   */
  outside?: {
    temperature?: NumberValue;
    dewPointTemperature?: NumberValue1;
    apparentWindChillTemperature?: NumberValue2;
    theoreticalWindChillTemperature?: NumberValue3;
    heatIndexTemperature?: NumberValue4;
    pressure?: NumberValue5;
    humidity?: NumberValue6;
    relativeHumidity?: NumberValue7;
    airDensity?: NumberValue8;
    illuminance?: NumberValue9;
    [k: string]: unknown;
  };
  /**
   * Environmental conditions inside the vessel's hull
   */
  inside?: {
    [k: string]: ZoneObject;
  } & ZoneObject1;
  /**
   * Environmental conditions of the water that the vessel is sailing in
   */
  water?: {
    temperature?: NumberValue18;
    salinity?: NumberValue19;
    [k: string]: unknown;
  };
  depth?: Depth;
  current?: Current;
  tide?: Tide;
  heave?: NumberValue28;
  wind?: Wind;
  /**
   * A time reference for the vessel. All clocks on the vessel dispaying local time should use the timezone offset here. If a timezoneRegion is supplied the timezone must also be supplied. If timezoneRegion is supplied that should be displayed by UIs in preference to simply timezone. ie 12:05 (Europe/London) should be displayed in preference to 12:05 (UTC+01:00)
   */
  time?: {
    millis?: EpochTime;
    timezoneOffset?: TimezoneOffset;
    timezoneRegion?: IANATimezoneNationalRegion;
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[0-9]*".
     */
    timestamp?: string;
    source?: Source;
    [k: string]: unknown;
  };
  /**
   * Mode of the vessel based on the current conditions. Can be combined with navigation.state to control vessel signals eg switch to night mode for instrumentation and lights, or make sound signals for fog.
   */
  mode?: {
    value?: "day" | "night" | "restricted visibility";
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[0-9]*".
     */
    timestamp?: string;
    source?: Source;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface CommonValueFields {
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   *
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
   *
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "[0-9]*".
   */
  timestamp: string;
  /**
   * Reference to the source under /sources. A dot spearated path to the data. eg [type].[bus].[device]
   */
  $source: string;
  _attr?: _AttrSchema;
  meta?: MetaSchema;
  pgn?: number;
  sentence?: string;
  [k: string]: unknown;
}
/**
 * Filesystem specific data, e.g. security, possibly more later.
 */
export interface _AttrSchema {
  _mode?: _ModeSchema;
  _owner?: _OwnerSchema;
  _group?: _GroupSchema;
  [k: string]: unknown;
}
/**
 * Provides meta data to enable alarm and display configuration.
 */
export interface MetaSchema {
  displayName?: DisplayNameSchema;
  longName?: LongNameSchema;
  shortName?: ShortNameSchema;
  description: DescriptionSchema;
  enum?: PermissibleValues;
  properties?: PropertiesForObjectValuedProperties;
  gaugeType?: GaugeTypeSchema;
  displayScale?: ScaleToDisplay;
  units?: UnitsSchema;
  timeout?: Timeout;
  alertMethod?: AlertMethod;
  warnMethod?: WarnMethod;
  alarmMethod?: AlarmMethod;
  emergencyMethod?: EmergencyMethod;
  zones?: ZonesSchema;
  [k: string]: unknown;
}
export interface PropertiesForObjectValuedProperties {
  /**
   * This interface was referenced by `PropertiesForObjectValuedProperties`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]: {
    type?: string;
    title?: string;
    description?: string;
    units?: string;
    example?:
      | string
      | number
      | boolean
      | {
          [k: string]: unknown;
        };
    [k: string]: unknown;
  };
}
/**
 * A zone used to define the display and alarm state when the value is in between bottom and top.
 */
export interface Zone {
  lower?: Lower;
  upper?: Upper;
  state: AlarmState;
  message?: Message;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 */
export interface ValuesNumberValue {
  value?: number;
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   *
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
   *
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "[0-9]*".
   */
  timestamp?: string;
  pgn?: number;
  sentence?: string;
  [k: string]: unknown;
}
/**
 * This regex pattern is used for validation of the identifier for the environmental zone, eg. engineRoom, mainCabin, refrigerator
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[A-Za-z0-9]+".
 */
export interface ZoneObject {
  temperature?: NumberValue10;
  heatIndexTemperature?: NumberValue11;
  pressure?: NumberValue12;
  relativeHumidity?: NumberValue13;
  dewPoint?: NumberValue14;
  dewPointTemperature?: NumberValue15;
  airDensity?: NumberValue16;
  illuminance?: NumberValue17;
  [k: string]: unknown;
}
export interface ZoneObject1 {
  temperature?: NumberValue10;
  heatIndexTemperature?: NumberValue11;
  pressure?: NumberValue12;
  relativeHumidity?: NumberValue13;
  dewPoint?: NumberValue14;
  dewPointTemperature?: NumberValue15;
  airDensity?: NumberValue16;
  illuminance?: NumberValue17;
  [k: string]: unknown;
}
/**
 * Depth related data
 */
export interface Depth {
  belowKeel?: NumberValue20;
  belowTransducer?: NumberValue21;
  belowSurface?: NumberValue22;
  transducerToKeel?: NumberValue23;
  surfaceToTransducer?: NumberValue24;
  [k: string]: unknown;
}
/**
 * Tide data
 */
export interface Tide {
  heightHigh?: NumberValue25;
  heightNow?: NumberValue26;
  heightLow?: NumberValue27;
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   */
  timeLow?: string;
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   */
  timeHigh?: string;
  [k: string]: unknown;
}
/**
 * Wind data.
 */
export interface Wind {
  angleApparent?: NumberValue29;
  angleTrueGround?: NumberValue30;
  angleTrueWater?: NumberValue31;
  directionChangeAlarm?: NumberValue32;
  directionTrue?: NumberValue33;
  directionMagnetic?: NumberValue34;
  speedTrue?: NumberValue35;
  speedOverGround?: NumberValue36;
  speedApparent?: NumberValue37;
  [k: string]: unknown;
}
/**
 * Source of data in delta format, a record of where the data was received from. An object containing at least the properties defined in 'properties', but can contain anything beyond that.
 */
export interface Source {
  /**
   * A label to identify the source bus, eg serial-COM1, eth-local,etc . Can be anything but should follow a predicatable format
   */
  label: string;
  /**
   * A human name to identify the type. NMEA0183, NMEA2000, signalk
   */
  type?: string;
  /**
   * NMEA2000 src value or any similar value for encapsulating the original source of the data
   */
  src?: string;
  /**
   * NMEA2000 can name of the source device
   */
  canName?: string;
  /**
   * NMEA2000 pgn of the source message
   */
  pgn?: number;
  /**
   * NMEA2000 instance value of the source message
   */
  instance?: string;
  /**
   * Sentence type of the source NMEA0183 sentence, $GP[RMC],092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  sentence?: string;
  /**
   * Talker id of the source NMEA0183 sentence, $[GP]RMC,092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  talker?: string;
  /**
   * AIS Message Type
   */
  aisType?: number;
  [k: string]: unknown;
}
/**
 * Navigation data including Position, Course to next WP information, etc.
 */
export interface Navigation {
  lights?: NavigationLights;
  courseOverGroundMagnetic?: NumberValue38;
  courseOverGroundTrue?: NumberValue39;
  courseRhumbline?: Course;
  courseGreatCircle?: Course1;
  /**
   * Calculated values for other vessels, e.g. from AIS
   */
  closestApproach?: CommonValueFields & {
    value?: {
      /**
       * Closest Point of Approach (CPA), distance between own vessel and other vessel, based on current speeds, headings and positions
       */
      distance?: number;
      /**
       * Time to Closest Point of Approach (TCPA), between own vessel and other vessel, based on current speeds, headings and positions
       */
      timeTo?: number;
      [k: string]: unknown;
    };
    values?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` ".*".
       */
      [k: string]: {
        /**
         * RFC 3339 (UTC only without local offset) string representing date and time.
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "[0-9]*".
         */
        timestamp?: string;
        pgn?: number;
        sentence?: string;
        value?: {
          distance?: number;
          timeTo?: number;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
    };
    [k: string]: unknown;
  };
  /**
   * Specific navigational data related to yacht racing.
   */
  racing?: {
    startLineStb?: Position2;
    startLinePort?: Position3;
    distanceStartline?: NumberValue49;
    timeToStart?: NumberValue50;
    timePortDown?: NumberValue51;
    timePortUp?: NumberValue52;
    timeStbdDown?: NumberValue53;
    timeStbdUp?: NumberValue54;
    /**
     * The layline crossing the current course
     */
    layline?: {
      distance?: NumberValue55;
      time?: NumberValue56;
      [k: string]: unknown;
    };
    /**
     * The layline parallell to current course
     */
    oppositeLayline?: {
      distance?: NumberValue57;
      time?: NumberValue58;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  magneticVariation?: NumberValue59;
  magneticVariationAgeOfService?: NumberValue60;
  destination?: Destination;
  gnss?: Gnss;
  headingMagnetic?: NumberValue68;
  magneticDeviation?: NumberValue69;
  headingCompass?: NumberValue70;
  headingTrue?: NumberValue71;
  position?: Position4;
  attitude?: Attitude;
  /**
   * Special maneuver such as regional passing arrangement. (from ais)
   */
  maneuver?: CommonValueFields & string;
  rateOfTurn?: NumberValue72;
  speedOverGround?: NumberValue73;
  speedThroughWater?: NumberValue74;
  speedThroughWaterTransverse?: NumberValue75;
  speedThroughWaterLongitudinal?: NumberValue76;
  leewayAngle?: NumberValue77;
  log?: NumberValue78;
  /**
   * Trip data
   */
  trip?: {
    log?: NumberValue79;
    lastReset?: DatetimeValue4;
    [k: string]: unknown;
  };
  state?: State;
  anchor?: Anchor;
  /**
   * Time and Date from the GNSS Positioning System
   */
  datetime?: CommonValueFields & {
    /**
     * GNSS Time and Date in RFC 3339 (UTC only without local offset) format
     */
    value?: string;
    /**
     * Source of GNSS Date and Time
     */
    gnssTimeSource?: "GPS" | "GLONASS" | "Galileo" | "Beidou" | "IRNSS" | "Radio Signal" | "Internet" | "Local clock";
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Current state of the vessels navigation lights
 */
export interface NavigationLights {
  value?:
    | "off"
    | "fault"
    | "anchored"
    | "sailing"
    | "motoring"
    | "towing < 200m"
    | "towing > 200m"
    | "pushing"
    | "fishing"
    | "fishing-hampered"
    | "trawling"
    | "trawling-shooting"
    | "trawling-hauling"
    | "pilotage"
    | "not-under-way"
    | "aground"
    | "restricted manouverability"
    | "restricted manouverability towing < 200m"
    | "restricted manouverability towing > 200m"
    | "restricted manouverability underwater operations"
    | "constrained by draft"
    | "mine clearance";
  source?: Source1;
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   */
  timestamp?: string;
  [k: string]: unknown;
}
/**
 * Source of data in delta format, a record of where the data was received from. An object containing at least the properties defined in 'properties', but can contain anything beyond that.
 */
export interface Source1 {
  /**
   * A label to identify the source bus, eg serial-COM1, eth-local,etc . Can be anything but should follow a predicatable format
   */
  label: string;
  /**
   * A human name to identify the type. NMEA0183, NMEA2000, signalk
   */
  type?: string;
  /**
   * NMEA2000 src value or any similar value for encapsulating the original source of the data
   */
  src?: string;
  /**
   * NMEA2000 can name of the source device
   */
  canName?: string;
  /**
   * NMEA2000 pgn of the source message
   */
  pgn?: number;
  /**
   * NMEA2000 instance value of the source message
   */
  instance?: string;
  /**
   * Sentence type of the source NMEA0183 sentence, $GP[RMC],092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  sentence?: string;
  /**
   * Talker id of the source NMEA0183 sentence, $[GP]RMC,092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  talker?: string;
  /**
   * AIS Message Type
   */
  aisType?: number;
  [k: string]: unknown;
}
/**
 * Course information computed with Rhumbline
 */
export interface Course {
  crossTrackError?: NumberValue40;
  bearingTrackTrue?: NumberValue41;
  bearingTrackMagnetic?: NumberValue42;
  /**
   * Data required if sailing to an active route, defined in resources.
   */
  activeRoute?: {
    /**
     * A reference (URL) to the presently active route, in resources.
     */
    href?: string;
    estimatedTimeOfArrival?: DatetimeValue;
    startTime?: DatetimeValue1;
    [k: string]: unknown;
  };
  /**
   * The point on earth the vessel's presently navigating towards
   */
  nextPoint?:
    | CommonValueFields
    | {
        value?: {
          /**
           * The type of the next point (e.g. Waypoint, POI, Race Mark, etc)
           */
          type?: string;
          /**
           * A reference (URL) to an object (under resources) this point is related to
           */
          href?: string;
          [k: string]: unknown;
        };
        distance?: NumberValue43;
        bearingTrue?: NumberValue44;
        bearingMagnetic?: NumberValue45;
        velocityMadeGood?: NumberValue46;
        timeToGo?: NumberValue47;
        position?: Position;
        estimatedTimeOfArrival?: DatetimeValue2;
        [k: string]: unknown;
      };
  /**
   * The point on earth the vessel's presently navigating from
   */
  previousPoint?: CommonValueFields & {
    value?: {
      /**
       * The type of the previous point (e.g. Waypoint, POI, Race Mark, etc)
       */
      type?: string;
      /**
       * A reference (URL) to an object (under resources) this point is related to
       */
      href?: string;
      [k: string]: unknown;
    };
    distance?: NumberValue48;
    position?: Position1;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 */
export interface ValuesDatetimeValue {
  value?: string;
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   *
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
   *
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "[0-9]*".
   */
  timestamp?: string;
  pgn?: number;
  sentence?: string;
  [k: string]: unknown;
}
/**
 * Course information computed with Great Circle
 */
export interface Course1 {
  crossTrackError?: NumberValue40;
  bearingTrackTrue?: NumberValue41;
  bearingTrackMagnetic?: NumberValue42;
  /**
   * Data required if sailing to an active route, defined in resources.
   */
  activeRoute?: {
    /**
     * A reference (URL) to the presently active route, in resources.
     */
    href?: string;
    estimatedTimeOfArrival?: DatetimeValue;
    startTime?: DatetimeValue1;
    [k: string]: unknown;
  };
  /**
   * The point on earth the vessel's presently navigating towards
   */
  nextPoint?:
    | CommonValueFields
    | {
        value?: {
          /**
           * The type of the next point (e.g. Waypoint, POI, Race Mark, etc)
           */
          type?: string;
          /**
           * A reference (URL) to an object (under resources) this point is related to
           */
          href?: string;
          [k: string]: unknown;
        };
        distance?: NumberValue43;
        bearingTrue?: NumberValue44;
        bearingMagnetic?: NumberValue45;
        velocityMadeGood?: NumberValue46;
        timeToGo?: NumberValue47;
        position?: Position;
        estimatedTimeOfArrival?: DatetimeValue2;
        [k: string]: unknown;
      };
  /**
   * The point on earth the vessel's presently navigating from
   */
  previousPoint?: CommonValueFields & {
    value?: {
      /**
       * The type of the previous point (e.g. Waypoint, POI, Race Mark, etc)
       */
      type?: string;
      /**
       * A reference (URL) to an object (under resources) this point is related to
       */
      href?: string;
      [k: string]: unknown;
    };
    distance?: NumberValue48;
    position?: Position1;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * The intended destination of this trip
 */
export interface Destination {
  commonName?: StringValue;
  eta?: DatetimeValue3;
  waypoint?: StringValue1;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".*".
 */
export interface ValuesStringValue {
  value?: string;
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   *
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
   *
   * This interface was referenced by `undefined`'s JSON-Schema definition
   * via the `patternProperty` "[0-9]*".
   */
  timestamp?: string;
  pgn?: number;
  sentence?: string;
  [k: string]: unknown;
}
/**
 * Global satellite navigation meta information
 */
export interface Gnss {
  /**
   * Fix type
   */
  type?: CommonValueFields & string;
  /**
   * Quality of the satellite fix
   */
  methodQuality?: CommonValueFields;
  /**
   * Integrity of the satellite fix
   */
  integrity?: CommonValueFields;
  satellites?: NumberValue61;
  antennaAltitude?: NumberValue62;
  horizontalDilution?: NumberValue63;
  positionDilution?: NumberValue64;
  geoidalSeparation?: NumberValue65;
  differentialAge?: NumberValue66;
  differentialReference?: NumberValue67;
  [k: string]: unknown;
}
/**
 * The anchor data, for anchor watch etc
 */
export interface Anchor {
  source?: Source2;
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   */
  timestamp?: string;
  maxRadius?: NumberValue80;
  currentRadius?: NumberValue81;
  position?: Position5;
  [k: string]: unknown;
}
/**
 * Source of data in delta format, a record of where the data was received from. An object containing at least the properties defined in 'properties', but can contain anything beyond that.
 */
export interface Source2 {
  /**
   * A label to identify the source bus, eg serial-COM1, eth-local,etc . Can be anything but should follow a predicatable format
   */
  label: string;
  /**
   * A human name to identify the type. NMEA0183, NMEA2000, signalk
   */
  type?: string;
  /**
   * NMEA2000 src value or any similar value for encapsulating the original source of the data
   */
  src?: string;
  /**
   * NMEA2000 can name of the source device
   */
  canName?: string;
  /**
   * NMEA2000 pgn of the source message
   */
  pgn?: number;
  /**
   * NMEA2000 instance value of the source message
   */
  instance?: string;
  /**
   * Sentence type of the source NMEA0183 sentence, $GP[RMC],092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  sentence?: string;
  /**
   * Talker id of the source NMEA0183 sentence, $[GP]RMC,092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  talker?: string;
  /**
   * AIS Message Type
   */
  aisType?: number;
  [k: string]: unknown;
}
/**
 * Engine data, each engine identified by a unique name i.e. Port_Engine
 */
export interface Propulsion {
  /**
   * This regex pattern is used for validation of the identifier for the propulsion unit
   *
   * This interface was referenced by `Propulsion`'s JSON-Schema definition
   * via the `patternProperty` "(^[A-Za-z0-9]+$)".
   */
  [k: string]: {
    /**
     * Human readable label for the propulsion unit
     */
    label?: string;
    /**
     * The current state of the engine
     */
    state?: CommonValueFields & {
      value?: "stopped" | "started" | "unusable";
      [k: string]: unknown;
    };
    revolutions?: NumberValue82;
    temperature?: NumberValue83;
    oilTemperature?: NumberValue84;
    oilPressure?: NumberValue85;
    alternatorVoltage?: NumberValue86;
    runTime?: NumberValue87;
    coolantTemperature?: NumberValue88;
    coolantPressure?: NumberValue89;
    boostPressure?: NumberValue90;
    intakeManifoldTemperature?: NumberValue91;
    engineLoad?: NumberValue92;
    engineTorque?: NumberValue93;
    /**
     * The transmission (gear box) of the named engine
     */
    transmission?: {
      /**
       * Currently selected gear the engine is in i.e. Forward, Reverse, etc.
       */
      gear?: CommonValueFields & {
        value?: "Forward" | "Neutral" | "Reverse" | "Fault";
        [k: string]: unknown;
      };
      gearRatio?: NumberValue94;
      oilTemperature?: NumberValue95;
      oilPressure?: NumberValue96;
      [k: string]: unknown;
    };
    /**
     * Data about the engine's drive.
     */
    drive?: {
      /**
       * The type of drive the boat has i.e Outboard, shaft, jet, etc.
       */
      type?: "saildrive" | "shaft" | "outboard" | "jet" | "pod" | "other";
      trimState?: NumberValue97;
      thrustAngle?: NumberValue98;
      /**
       * Data about the drive's propeller (pitch and slip)
       */
      propeller?: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
    /**
     * Data about the engine's Fuel Supply
     */
    fuel?: {
      /**
       * Fuel type
       */
      type?: "diesel" | "petrol" | "electric" | "coal/wood" | "other";
      used?: NumberValue99;
      pressure?: NumberValue100;
      rate?: NumberValue101;
      economyRate?: NumberValue102;
      averageRate?: NumberValue103;
      [k: string]: unknown;
    };
    exhaustTemperature?: NumberValue104;
    [k: string]: unknown;
  };
}
/**
 * Electrical data, each electrical device indentified by a unique name i.e. Battery_1
 */
export interface Electrical {
  /**
   * Data about the vessel's batteries
   */
  batteries?: {
    [k: string]: BatteryKeyedByInstanceId;
  };
  /**
   * Data about the Inverter that has both DC and AC qualities
   */
  inverters?: {
    [k: string]: Inverter;
  };
  /**
   * Data about AC sourced battery charger
   */
  chargers?: {
    [k: string]: Charger;
  };
  /**
   * Data about an Alternator charging device
   */
  alternators?: {
    [k: string]: Alternator;
  };
  /**
   * Data about Solar charging device(s)
   */
  solar?: {
    [k: string]: Solar;
  };
  /**
   * AC buses
   */
  ac?: {
    [k: string]: ACBusKeyedByInstanceId;
  };
  [k: string]: unknown;
}
/**
 *  Common ID items shared by electrical items
 */
export interface ElectricalID {
  /**
   * Unique ID of device (houseBattery, alternator, Generator, solar1, inverter, charger, combiner, etc.)
   */
  name?: string;
  /**
   * Installed location of device on vessel
   */
  location?: string;
  /**
   * RFC 3339 (UTC only without local offset) string representing date and time.
   */
  dateInstalled?: string;
  manufacturer?: {
    /**
     * Manufacturer's name
     */
    name?: string;
    /**
     * Model or part number
     */
    model?: string;
    /**
     * Web referance / URL
     */
    URL?: string;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * DC common qualities
 */
export interface DCQualities {
  /**
   * Name of BUS device is associated with
   */
  associatedBus?: string;
  /**
   * Voltage measured at or as close as possible to the device
   */
  voltage?: NumberValue105 & {
    ripple?: NumberValue106;
    meta?: {
      /**
       * Designed 'voltage' of device (12v, 24v, 32v, 36v, 42v, 48v, 144v, etc.)
       */
      nominal?: number;
      /**
       * Upper operational voltage limit
       */
      warnUpper?: number;
      /**
       * Lower operational voltage limit
       */
      warnLower?: number;
      /**
       * Upper fault voltage limit - device may disable/disconnect
       */
      faultUpper?: number;
      /**
       * Lower fault voltage limit - device may disable/disconnect
       */
      faultLower?: number;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  /**
   * Current flowing out (+ve) or in (-ve) to the device
   */
  current?: NumberValue105 & {
    meta?: {
      /**
       * Upper operational current limit
       */
      warnUpper?: number;
      /**
       * Lower operational current limit
       */
      warnLower?: number;
      /**
       * Upper fault current limit - device may disable/disconnect
       */
      faultUpper?: number;
      /**
       * Lower fault current limit - device may disable/disconnect
       */
      faultLower?: number;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  temperature?: Temperature;
  [k: string]: unknown;
}
/**
 * Common charger qualities
 */
export interface ChargerQualities {
  /**
   * Algorithm being used by the charger
   */
  chargingAlgorithm?: CommonValueFields & {
    value?:
      | "trickle"
      | "two stage"
      | "three stage"
      | "four stage"
      | "constant current"
      | "constant voltage"
      | "custom profile";
    [k: string]: unknown;
  };
  /**
   * How is charging source configured?  Standalone, or in sync with another charger?
   */
  chargerRole?: CommonValueFields & {
    value?: "standalone" | "master" | "slave" | "standby";
    [k: string]: unknown;
  };
  /**
   * Charging mode i.e. float, overcharge, etc.
   */
  chargingMode?: CommonValueFields & {
    value?: "bulk" | "acceptance" | "overcharge" | "float" | "equalize" | "unknown" | "other";
    [k: string]: unknown;
  };
  setpointVoltage?: NumberValue107;
  setpointCurrent?: NumberValue108;
  [k: string]: unknown;
}
/**
 * Notifications currently raised. Major categories have well-defined names, but the tree can be extended by any hierarchical structure
 */
export interface Notifications {
  mob?: Notification;
  fire?: Notification1;
  sinking?: Notification2;
  flooding?: Notification3;
  collision?: Notification4;
  grounding?: Notification5;
  listing?: Notification6;
  adrift?: Notification7;
  piracy?: Notification8;
  abandon?: Notification9;
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `Notifications`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch | Notification10;
}
export interface NotificationBranch {
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `NotificationBranch`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch2`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch3`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch4`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch1 | Notification10;
}
export interface NotificationBranch1 {
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `NotificationBranch`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch2`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch3`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch4`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch1 | Notification10;
}
/**
 * Vessel steering data for steering controls (not Autopilot 'Nav Data')
 */
export interface Steering {
  rudderAngle?: NumberValue109;
  rudderAngleTarget?: NumberValue110;
  autopilot?: Autopilot;
  [k: string]: unknown;
}
/**
 * Autopilot data
 */
export interface Autopilot {
  /**
   * Autopilot state
   */
  state?: CommonValueFields & {
    value?: "auto" | "standby" | "alarm" | "noDrift" | "wind" | "depthContour" | "route" | "directControl";
    [k: string]: unknown;
  };
  /**
   * Operational mode
   */
  mode?: CommonValueFields & {
    value?: "powersave" | "normal" | "accurate";
    [k: string]: unknown;
  };
  target?: Target;
  deadZone?: NumberValue115;
  backlash?: NumberValue116;
  gain?: NumberValue117;
  maxDriveCurrent?: NumberValue118;
  maxDriveRate?: NumberValue119;
  portLock?: NumberValue120;
  starboardLock?: NumberValue121;
  [k: string]: unknown;
}
/**
 * Autopilot target
 */
export interface Target {
  windAngleApparent?: NumberValue111;
  windAngleTrue?: NumberValue112;
  headingTrue?: NumberValue113;
  headingMagnetic?: NumberValue114;
  [k: string]: unknown;
}
/**
 * Tank data, each tank indentified by a unique name i.e. FreshWater_2
 */
export interface Tanks {
  /**
   * Fresh water tank (drinking)
   */
  freshWater?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  /**
   * Waste water tank (grey water)
   */
  wasteWater?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  /**
   * Black water tank (sewage)
   */
  blackWater?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  /**
   * Fuel tank (petrol or diesel)
   */
  fuel?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  /**
   * Lubrication tank (oil or grease)
   */
  lubrication?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  /**
   * Live tank (fish)
   */
  liveWell?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  /**
   * Bait tank
   */
  baitWell?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  /**
   * Lpg/propane and other gases
   */
  gas?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  /**
   * Ballast tanks
   */
  ballast?: {
    /**
     * Tank, one or many, within the vessel
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]: {
      /**
       * The name of the tank. Useful if multiple tanks of a certain type are on board
       */
      name?: string;
      /**
       * The type of tank
       */
      type?:
        | "petrol"
        | "fresh water"
        | "greywater"
        | "blackwater"
        | "holding"
        | "lpg"
        | "diesel"
        | "liveWell"
        | "baitWell"
        | "ballast"
        | "rum";
      capacity?: NumberValue122;
      currentLevel?: NumberValue123;
      currentVolume?: NumberValue124;
      pressure?: NumberValue125;
      temperature?: NumberValue126;
      viscosity?: NumberValue127;
      extinguishant?: StringValue2;
      [k: string]: unknown;
    };
  };
  [k: string]: unknown;
}
/**
 * Design/dimensional data of this vessel
 */
export interface Design {
  displacement?: NumberValue128;
  /**
   * The ais ship type see http://www.bosunsmate.org/ais/message5.php
   */
  aisShipType?: CommonValueFields & {
    value?: {
      /**
       * The ship type number
       */
      id?: number;
      /**
       * The ship type name
       */
      name?: string;
      [k: string]: unknown;
    } & (
      | {id: 20; name: "Wing In Ground"}
      | {id: 21; name: "Wing In Ground hazard cat A"}
      | {id: 22; name: "Wing In Ground hazard cat B"}
      | {id: 23; name: "Wing In Ground hazard cat C"}
      | {id: 24; name: "Wing In Ground hazard cat D"}
      | {id: 25; name: "Wing In Ground"}
      | {id: 26; name: "Wing In Ground"}
      | {id: 27; name: "Wing In Ground"}
      | {id: 28; name: "Wing In Ground"}
      | {id: 29; name: "Wing In Ground (no other information)"}
      | {id: 30; name: "Fishing"}
      | {id: 31; name: "Towing"}
      | {id: 32; name: "Towing exceeds 200m or wider than 25m"}
      | {id: 33; name: "Engaged in dredging or underwater operations"}
      | {id: 34; name: "Engaged in diving operations"}
      | {id: 35; name: "Engaged in military operations"}
      | {id: 36; name: "Sailing"}
      | {id: 37; name: "Pleasure"}
      | {id: 40; name: "High speed craft"}
      | {id: 41; name: "High speed craft carrying dangerous goods"}
      | {id: 42; name: "High speed craft hazard cat B"}
      | {id: 43; name: "High speed craft hazard cat C"}
      | {id: 44; name: "High speed craft hazard cat D"}
      | {id: 45; name: "High speed craft"}
      | {id: 46; name: "High speed craft"}
      | {id: 47; name: "High speed craft"}
      | {id: 48; name: "High speed craft"}
      | {id: 49; name: "High speed craft (no additional information)"}
      | {id: 50; name: "Pilot vessel"}
      | {id: 51; name: "SAR"}
      | {id: 52; name: "Tug"}
      | {id: 53; name: "Port tender"}
      | {id: 54; name: "Anti-pollution"}
      | {id: 55; name: "Law enforcement"}
      | {id: 56; name: "Spare"}
      | {id: 57; name: "Spare #2"}
      | {id: 58; name: "Medical"}
      | {id: 59; name: "RR Resolution No.18"}
      | {id: 60; name: "Passenger ship"}
      | {id: 61; name: "Passenger ship hazard cat A"}
      | {id: 62; name: "Passenger ship hazard cat B"}
      | {id: 63; name: "Passenger ship hazard cat C"}
      | {id: 64; name: "Passenger ship hazard cat D"}
      | {id: 65; name: "Passenger ship"}
      | {id: 66; name: "Passenger ship"}
      | {id: 67; name: "Passenger ship"}
      | {id: 68; name: "Passenger ship"}
      | {id: 69; name: "Passenger ship (no additional information)"}
      | {id: 70; name: "Cargo ship"}
      | {id: 71; name: "Cargo ship carrying dangerous goods"}
      | {id: 72; name: "Cargo ship hazard cat B"}
      | {id: 73; name: "Cargo ship hazard cat C"}
      | {id: 74; name: "Cargo ship hazard cat D"}
      | {id: 75; name: "Cargo ship"}
      | {id: 76; name: "Cargo ship"}
      | {id: 77; name: "Cargo ship"}
      | {id: 78; name: "Cargo ship"}
      | {id: 79; name: "Cargo ship (no additional information)"}
      | {id: 80; name: "Tanker"}
      | {id: 81; name: "Tanker carrying dangerous goods"}
      | {id: 82; name: "Tanker hazard cat B"}
      | {id: 83; name: "Tanker hazard cat C"}
      | {id: 84; name: "Tanker hazard cat D"}
      | {id: 85; name: "Tanker"}
      | {id: 86; name: "Tanker"}
      | {id: 87; name: "Tanker"}
      | {id: 88; name: "Tanker"}
      | {id: 89; name: "Tanker (no additional information)"}
      | {id: 90; name: "Other"}
      | {id: 91; name: "Other carrying dangerous goods"}
      | {id: 92; name: "Other hazard cat B"}
      | {id: 93; name: "Other hazard cat C"}
      | {id: 94; name: "Other hazard cat D"}
      | {id: 95; name: "Other"}
      | {id: 96; name: "Other"}
      | {id: 97; name: "Other"}
      | {id: 98; name: "Other"}
      | {id: 99; name: "Other (no additional information)"}
    );
    [k: string]: unknown;
  };
  draft?: Draft;
  length?: Length;
  keel?: Keel;
  beam?: NumberValue129;
  airHeight?: NumberValue130;
  rigging?: Rigging;
  [k: string]: unknown;
}
/**
 * Sails data
 */
export interface Sails {
  /**
   * An object containing a description of each sail available to the vessel crew
   */
  inventory?: {
    /**
     * 'sail' data type.
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "(^[a-zA-Z0-9]+$)".
     */
    [k: string]: {
      /**
       * An unique identifier by which the crew identifies a sail
       */
      name: string;
      /**
       * The type of sail
       */
      type: string;
      /**
       * The material the sail is made from (optional)
       */
      material?: string;
      /**
       * The brand of the sail (optional)
       */
      brand?: string;
      /**
       * Indicates wether this sail is currently in use or not
       */
      active: boolean;
      /**
       * The total area of this sail in square meters
       */
      area: number;
      /**
       * The minimum wind speed this sail can be used with
       */
      minimumWind?: number;
      /**
       * The maximum wind speed this sail can be used with
       */
      maximumWind?: number;
      /**
       * An object describing reduction of sail area
       */
      reducedState?: {
        /**
         * describes whether the sail is reduced or not
         */
        reduced?: boolean;
        /**
         * Number of reefs set, 0 means full
         */
        reefs?: number;
        /**
         * Ratio of sail reduction, 0 means full and 1 is completely furled in
         */
        furledRatio?: number;
        [k: string]: unknown;
      };
      /**
       * RFC 3339 (UTC only without local offset) string representing date and time.
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
       *
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` "[0-9]*".
       */
      timestamp?: string;
      source?: Source;
      _attr?: _AttrSchema;
      meta?: MetaSchema;
      [k: string]: unknown;
    };
  };
  /**
   * An object containing information about the vessels' sails.
   */
  area?: {
    total?: NumberValue131;
    active?: NumberValue132;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Sensors, their state, and data.
 */
export interface Sensors {
  [k: string]: Sensor;
}
/**
 * This regex pattern is used for validation UUID identifier for the sensor
 *
 * This interface was referenced by `Sensors`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export interface Sensor {
  /**
   * The common name of the sensor
   */
  name?: string;
  /**
   * The datamodel definition of the sensor data. FIXME - need to create a definitions lib of sensor datamodel types
   */
  sensorType?: string;
  /**
   * The data of the sensor data. FIXME - need to ref the definitions of sensor types
   */
  sensorData?: string;
  fromBow?: NumberValue133;
  fromCenter?: NumberValue134;
  class?: StringValue3;
  [k: string]: unknown;
}
/**
 * Performance Sailing data including VMG, Polar Speed, tack angle, etc.
 */
export interface Performance {
  polars?: PolarUuid;
  /**
   * The UUID of the active polar table
   */
  activePolar?: string;
  activePolarData?: Polar1;
  polarSpeed?: NumberValue135;
  polarSpeedRatio?: NumberValue136;
  velocityMadeGood?: NumberValue137;
  velocityMadeGoodToWaypoint?: NumberValue138;
  beatAngle?: NumberValue139;
  beatAngleVelocityMadeGood?: NumberValue140;
  beatAngleTargetSpeed?: NumberValue141;
  gybeAngle?: NumberValue142;
  gybeAngleVelocityMadeGood?: NumberValue143;
  gybeAngleTargetSpeed?: NumberValue144;
  targetAngle?: NumberValue145;
  targetSpeed?: NumberValue146;
  leeway?: NumberValue147;
  tackMagnetic?: NumberValue148;
  tackTrue?: NumberValue149;
  [k: string]: unknown;
}
/**
 * Polar objects
 */
export interface PolarUuid {
  [k: string]: Polar;
}
/**
 * This interface was referenced by `PolarUuid`'s JSON-Schema definition
 * via the `patternProperty` "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$".
 */
export interface Polar {
  id: string;
  name: string;
  description?: string;
  source?: Source;
  windData: {
    /**
     * The true wind speed for the polar values
     */
    trueWindSpeed: number;
    /**
     * Optimal beating values, angle and boat speed. One element if symmetrical, two if not
     *
     * @maxItems 2
     */
    optimalBeats?: [] | [[number, number]] | [[number, number], [number, number]];
    /**
     * Optimal gybe values, angle and boat speed. One element if symmetrical, two if not
     *
     * @maxItems 2
     */
    optimalGybes?: [] | [[number, number]] | [[number, number], [number, number]];
    /**
     * The polar table for the specific wind speed, comprising of wind angles and boat speeds
     */
    angleData: [number, number] | [number, number, number][];
  }[];
}
/**
 * The 'polar' object belonging to the selected 'activePolar'
 */
export interface Polar1 {
  id: string;
  name: string;
  description?: string;
  source?: Source;
  windData: {
    /**
     * The true wind speed for the polar values
     */
    trueWindSpeed: number;
    /**
     * Optimal beating values, angle and boat speed. One element if symmetrical, two if not
     *
     * @maxItems 2
     */
    optimalBeats?: [] | [[number, number]] | [[number, number], [number, number]];
    /**
     * Optimal gybe values, angle and boat speed. One element if symmetrical, two if not
     *
     * @maxItems 2
     */
    optimalGybes?: [] | [[number, number]] | [[number, number], [number, number]];
    /**
     * The polar table for the specific wind speed, comprising of wind angles and boat speeds
     */
    angleData: [number, number] | [number, number, number][];
  }[];
}
/**
 * Communication data including Radio, Telephone, E-Mail, etc.
 */
export interface Communication1 {
  /**
   * Callsign for VHF communication
   */
  callsignVhf?: string;
  /**
   * Callsign for HF communication
   */
  callsignHf?: string;
  /**
   * Phone number of skipper
   */
  phoneNumber?: string;
  /**
   * Email address to be used for HF email (Winmail, Airmail, Sailmail)
   */
  emailHf?: string;
  /**
   * Regular email for the skipper
   */
  email?: string;
  /**
   * Satellite phone number for vessel.
   */
  satPhoneNumber?: string;
  /**
   * Full name of the skipper of the vessel.
   */
  skipperName?: string;
  /**
   * Array with the names of the crew
   */
  crewNames?: [] | [string];
  [k: string]: unknown;
}
/**
 * Environmental data measured locally including Depth, Wind, Temp, etc.
 */
export interface Environment1 {
  /**
   * Environmental conditions outside of the vessel's hull
   */
  outside?: {
    temperature?: NumberValue;
    dewPointTemperature?: NumberValue1;
    apparentWindChillTemperature?: NumberValue2;
    theoreticalWindChillTemperature?: NumberValue3;
    heatIndexTemperature?: NumberValue4;
    pressure?: NumberValue5;
    humidity?: NumberValue6;
    relativeHumidity?: NumberValue7;
    airDensity?: NumberValue8;
    illuminance?: NumberValue9;
    [k: string]: unknown;
  };
  /**
   * Environmental conditions inside the vessel's hull
   */
  inside?: {
    [k: string]: ZoneObject;
  } & ZoneObject1;
  /**
   * Environmental conditions of the water that the vessel is sailing in
   */
  water?: {
    temperature?: NumberValue18;
    salinity?: NumberValue19;
    [k: string]: unknown;
  };
  depth?: Depth;
  current?: Current;
  tide?: Tide;
  heave?: NumberValue28;
  wind?: Wind;
  /**
   * A time reference for the vessel. All clocks on the vessel dispaying local time should use the timezone offset here. If a timezoneRegion is supplied the timezone must also be supplied. If timezoneRegion is supplied that should be displayed by UIs in preference to simply timezone. ie 12:05 (Europe/London) should be displayed in preference to 12:05 (UTC+01:00)
   */
  time?: {
    millis?: EpochTime;
    timezoneOffset?: TimezoneOffset;
    timezoneRegion?: IANATimezoneNationalRegion;
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[0-9]*".
     */
    timestamp?: string;
    source?: Source;
    [k: string]: unknown;
  };
  /**
   * Mode of the vessel based on the current conditions. Can be combined with navigation.state to control vessel signals eg switch to night mode for instrumentation and lights, or make sound signals for fog.
   */
  mode?: {
    value?: "day" | "night" | "restricted visibility";
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[0-9]*".
     */
    timestamp?: string;
    source?: Source;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Navigation data including Position, Course to next WP information, etc.
 */
export interface Navigation1 {
  lights?: NavigationLights;
  courseOverGroundMagnetic?: NumberValue38;
  courseOverGroundTrue?: NumberValue39;
  courseRhumbline?: Course;
  courseGreatCircle?: Course1;
  /**
   * Calculated values for other vessels, e.g. from AIS
   */
  closestApproach?: CommonValueFields & {
    value?: {
      /**
       * Closest Point of Approach (CPA), distance between own vessel and other vessel, based on current speeds, headings and positions
       */
      distance?: number;
      /**
       * Time to Closest Point of Approach (TCPA), between own vessel and other vessel, based on current speeds, headings and positions
       */
      timeTo?: number;
      [k: string]: unknown;
    };
    values?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` ".*".
       */
      [k: string]: {
        /**
         * RFC 3339 (UTC only without local offset) string representing date and time.
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "[0-9]*".
         */
        timestamp?: string;
        pgn?: number;
        sentence?: string;
        value?: {
          distance?: number;
          timeTo?: number;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
    };
    [k: string]: unknown;
  };
  /**
   * Specific navigational data related to yacht racing.
   */
  racing?: {
    startLineStb?: Position2;
    startLinePort?: Position3;
    distanceStartline?: NumberValue49;
    timeToStart?: NumberValue50;
    timePortDown?: NumberValue51;
    timePortUp?: NumberValue52;
    timeStbdDown?: NumberValue53;
    timeStbdUp?: NumberValue54;
    /**
     * The layline crossing the current course
     */
    layline?: {
      distance?: NumberValue55;
      time?: NumberValue56;
      [k: string]: unknown;
    };
    /**
     * The layline parallell to current course
     */
    oppositeLayline?: {
      distance?: NumberValue57;
      time?: NumberValue58;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  magneticVariation?: NumberValue59;
  magneticVariationAgeOfService?: NumberValue60;
  destination?: Destination;
  gnss?: Gnss;
  headingMagnetic?: NumberValue68;
  magneticDeviation?: NumberValue69;
  headingCompass?: NumberValue70;
  headingTrue?: NumberValue71;
  position?: Position4;
  attitude?: Attitude;
  /**
   * Special maneuver such as regional passing arrangement. (from ais)
   */
  maneuver?: CommonValueFields & string;
  rateOfTurn?: NumberValue72;
  speedOverGround?: NumberValue73;
  speedThroughWater?: NumberValue74;
  speedThroughWaterTransverse?: NumberValue75;
  speedThroughWaterLongitudinal?: NumberValue76;
  leewayAngle?: NumberValue77;
  log?: NumberValue78;
  /**
   * Trip data
   */
  trip?: {
    log?: NumberValue79;
    lastReset?: DatetimeValue4;
    [k: string]: unknown;
  };
  state?: State;
  anchor?: Anchor;
  /**
   * Time and Date from the GNSS Positioning System
   */
  datetime?: CommonValueFields & {
    /**
     * GNSS Time and Date in RFC 3339 (UTC only without local offset) format
     */
    value?: string;
    /**
     * Source of GNSS Date and Time
     */
    gnssTimeSource?: "GPS" | "GLONASS" | "Galileo" | "Beidou" | "IRNSS" | "Radio Signal" | "Internet" | "Local clock";
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Notifications currently raised. Major categories have well-defined names, but the tree can be extended by any hierarchical structure
 */
export interface Notifications1 {
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `Notifications1`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch2 | Notification10;
}
export interface NotificationBranch2 {
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `NotificationBranch`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch2`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch3`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch4`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch1 | Notification10;
}
/**
 * Design/dimensional data of this aircraft
 */
export interface Design1 {
  displacement?: NumberValue128;
  /**
   * The ais ship type see http://www.bosunsmate.org/ais/message5.php
   */
  aisShipType?: CommonValueFields & {
    value?: {
      /**
       * The ship type number
       */
      id?: number;
      /**
       * The ship type name
       */
      name?: string;
      [k: string]: unknown;
    } & (
      | {id: 20; name: "Wing In Ground"}
      | {id: 21; name: "Wing In Ground hazard cat A"}
      | {id: 22; name: "Wing In Ground hazard cat B"}
      | {id: 23; name: "Wing In Ground hazard cat C"}
      | {id: 24; name: "Wing In Ground hazard cat D"}
      | {id: 25; name: "Wing In Ground"}
      | {id: 26; name: "Wing In Ground"}
      | {id: 27; name: "Wing In Ground"}
      | {id: 28; name: "Wing In Ground"}
      | {id: 29; name: "Wing In Ground (no other information)"}
      | {id: 30; name: "Fishing"}
      | {id: 31; name: "Towing"}
      | {id: 32; name: "Towing exceeds 200m or wider than 25m"}
      | {id: 33; name: "Engaged in dredging or underwater operations"}
      | {id: 34; name: "Engaged in diving operations"}
      | {id: 35; name: "Engaged in military operations"}
      | {id: 36; name: "Sailing"}
      | {id: 37; name: "Pleasure"}
      | {id: 40; name: "High speed craft"}
      | {id: 41; name: "High speed craft carrying dangerous goods"}
      | {id: 42; name: "High speed craft hazard cat B"}
      | {id: 43; name: "High speed craft hazard cat C"}
      | {id: 44; name: "High speed craft hazard cat D"}
      | {id: 45; name: "High speed craft"}
      | {id: 46; name: "High speed craft"}
      | {id: 47; name: "High speed craft"}
      | {id: 48; name: "High speed craft"}
      | {id: 49; name: "High speed craft (no additional information)"}
      | {id: 50; name: "Pilot vessel"}
      | {id: 51; name: "SAR"}
      | {id: 52; name: "Tug"}
      | {id: 53; name: "Port tender"}
      | {id: 54; name: "Anti-pollution"}
      | {id: 55; name: "Law enforcement"}
      | {id: 56; name: "Spare"}
      | {id: 57; name: "Spare #2"}
      | {id: 58; name: "Medical"}
      | {id: 59; name: "RR Resolution No.18"}
      | {id: 60; name: "Passenger ship"}
      | {id: 61; name: "Passenger ship hazard cat A"}
      | {id: 62; name: "Passenger ship hazard cat B"}
      | {id: 63; name: "Passenger ship hazard cat C"}
      | {id: 64; name: "Passenger ship hazard cat D"}
      | {id: 65; name: "Passenger ship"}
      | {id: 66; name: "Passenger ship"}
      | {id: 67; name: "Passenger ship"}
      | {id: 68; name: "Passenger ship"}
      | {id: 69; name: "Passenger ship (no additional information)"}
      | {id: 70; name: "Cargo ship"}
      | {id: 71; name: "Cargo ship carrying dangerous goods"}
      | {id: 72; name: "Cargo ship hazard cat B"}
      | {id: 73; name: "Cargo ship hazard cat C"}
      | {id: 74; name: "Cargo ship hazard cat D"}
      | {id: 75; name: "Cargo ship"}
      | {id: 76; name: "Cargo ship"}
      | {id: 77; name: "Cargo ship"}
      | {id: 78; name: "Cargo ship"}
      | {id: 79; name: "Cargo ship (no additional information)"}
      | {id: 80; name: "Tanker"}
      | {id: 81; name: "Tanker carrying dangerous goods"}
      | {id: 82; name: "Tanker hazard cat B"}
      | {id: 83; name: "Tanker hazard cat C"}
      | {id: 84; name: "Tanker hazard cat D"}
      | {id: 85; name: "Tanker"}
      | {id: 86; name: "Tanker"}
      | {id: 87; name: "Tanker"}
      | {id: 88; name: "Tanker"}
      | {id: 89; name: "Tanker (no additional information)"}
      | {id: 90; name: "Other"}
      | {id: 91; name: "Other carrying dangerous goods"}
      | {id: 92; name: "Other hazard cat B"}
      | {id: 93; name: "Other hazard cat C"}
      | {id: 94; name: "Other hazard cat D"}
      | {id: 95; name: "Other"}
      | {id: 96; name: "Other"}
      | {id: 97; name: "Other"}
      | {id: 98; name: "Other"}
      | {id: 99; name: "Other (no additional information)"}
    );
    [k: string]: unknown;
  };
  draft?: Draft;
  length?: Length;
  keel?: Keel;
  beam?: NumberValue129;
  airHeight?: NumberValue130;
  rigging?: Rigging;
  [k: string]: unknown;
}
/**
 * Sensors, their state, and data.
 */
export interface Sensors1 {
  [k: string]: Sensor1;
}
/**
 * This regex pattern is used for validation UUID identifier for the sensor
 *
 * This interface was referenced by `Sensors1`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export interface Sensor1 {
  /**
   * The common name of the sensor
   */
  name?: string;
  /**
   * The datamodel definition of the sensor data. FIXME - need to create a definitions lib of sensor datamodel types
   */
  sensorType?: string;
  /**
   * The data of the sensor data. FIXME - need to ref the definitions of sensor types
   */
  sensorData?: string;
  fromBow?: NumberValue133;
  fromCenter?: NumberValue134;
  class?: StringValue3;
  [k: string]: unknown;
}
/**
 * Communication data including Radio, Telephone, E-Mail, etc.
 */
export interface Communication2 {
  /**
   * Callsign for VHF communication
   */
  callsignVhf?: string;
  /**
   * Callsign for HF communication
   */
  callsignHf?: string;
  /**
   * Phone number of skipper
   */
  phoneNumber?: string;
  /**
   * Email address to be used for HF email (Winmail, Airmail, Sailmail)
   */
  emailHf?: string;
  /**
   * Regular email for the skipper
   */
  email?: string;
  /**
   * Satellite phone number for vessel.
   */
  satPhoneNumber?: string;
  /**
   * Full name of the skipper of the vessel.
   */
  skipperName?: string;
  /**
   * Array with the names of the crew
   */
  crewNames?: [] | [string];
  [k: string]: unknown;
}
/**
 * Environmental data measured locally including Depth, Wind, Temp, etc.
 */
export interface Environment2 {
  /**
   * Environmental conditions outside of the vessel's hull
   */
  outside?: {
    temperature?: NumberValue;
    dewPointTemperature?: NumberValue1;
    apparentWindChillTemperature?: NumberValue2;
    theoreticalWindChillTemperature?: NumberValue3;
    heatIndexTemperature?: NumberValue4;
    pressure?: NumberValue5;
    humidity?: NumberValue6;
    relativeHumidity?: NumberValue7;
    airDensity?: NumberValue8;
    illuminance?: NumberValue9;
    [k: string]: unknown;
  };
  /**
   * Environmental conditions inside the vessel's hull
   */
  inside?: {
    [k: string]: ZoneObject;
  } & ZoneObject1;
  /**
   * Environmental conditions of the water that the vessel is sailing in
   */
  water?: {
    temperature?: NumberValue18;
    salinity?: NumberValue19;
    [k: string]: unknown;
  };
  depth?: Depth;
  current?: Current;
  tide?: Tide;
  heave?: NumberValue28;
  wind?: Wind;
  /**
   * A time reference for the vessel. All clocks on the vessel dispaying local time should use the timezone offset here. If a timezoneRegion is supplied the timezone must also be supplied. If timezoneRegion is supplied that should be displayed by UIs in preference to simply timezone. ie 12:05 (Europe/London) should be displayed in preference to 12:05 (UTC+01:00)
   */
  time?: {
    millis?: EpochTime;
    timezoneOffset?: TimezoneOffset;
    timezoneRegion?: IANATimezoneNationalRegion;
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[0-9]*".
     */
    timestamp?: string;
    source?: Source;
    [k: string]: unknown;
  };
  /**
   * Mode of the vessel based on the current conditions. Can be combined with navigation.state to control vessel signals eg switch to night mode for instrumentation and lights, or make sound signals for fog.
   */
  mode?: {
    value?: "day" | "night" | "restricted visibility";
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
     *
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` "[0-9]*".
     */
    timestamp?: string;
    source?: Source;
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Navigation data including Position, Course to next WP information, etc.
 */
export interface Navigation2 {
  lights?: NavigationLights;
  courseOverGroundMagnetic?: NumberValue38;
  courseOverGroundTrue?: NumberValue39;
  courseRhumbline?: Course;
  courseGreatCircle?: Course1;
  /**
   * Calculated values for other vessels, e.g. from AIS
   */
  closestApproach?: CommonValueFields & {
    value?: {
      /**
       * Closest Point of Approach (CPA), distance between own vessel and other vessel, based on current speeds, headings and positions
       */
      distance?: number;
      /**
       * Time to Closest Point of Approach (TCPA), between own vessel and other vessel, based on current speeds, headings and positions
       */
      timeTo?: number;
      [k: string]: unknown;
    };
    values?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` ".*".
       */
      [k: string]: {
        /**
         * RFC 3339 (UTC only without local offset) string representing date and time.
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "[0-9]*".
         */
        timestamp?: string;
        pgn?: number;
        sentence?: string;
        value?: {
          distance?: number;
          timeTo?: number;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
    };
    [k: string]: unknown;
  };
  /**
   * Specific navigational data related to yacht racing.
   */
  racing?: {
    startLineStb?: Position2;
    startLinePort?: Position3;
    distanceStartline?: NumberValue49;
    timeToStart?: NumberValue50;
    timePortDown?: NumberValue51;
    timePortUp?: NumberValue52;
    timeStbdDown?: NumberValue53;
    timeStbdUp?: NumberValue54;
    /**
     * The layline crossing the current course
     */
    layline?: {
      distance?: NumberValue55;
      time?: NumberValue56;
      [k: string]: unknown;
    };
    /**
     * The layline parallell to current course
     */
    oppositeLayline?: {
      distance?: NumberValue57;
      time?: NumberValue58;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  magneticVariation?: NumberValue59;
  magneticVariationAgeOfService?: NumberValue60;
  destination?: Destination;
  gnss?: Gnss;
  headingMagnetic?: NumberValue68;
  magneticDeviation?: NumberValue69;
  headingCompass?: NumberValue70;
  headingTrue?: NumberValue71;
  position?: Position4;
  attitude?: Attitude;
  /**
   * Special maneuver such as regional passing arrangement. (from ais)
   */
  maneuver?: CommonValueFields & string;
  rateOfTurn?: NumberValue72;
  speedOverGround?: NumberValue73;
  speedThroughWater?: NumberValue74;
  speedThroughWaterTransverse?: NumberValue75;
  speedThroughWaterLongitudinal?: NumberValue76;
  leewayAngle?: NumberValue77;
  log?: NumberValue78;
  /**
   * Trip data
   */
  trip?: {
    log?: NumberValue79;
    lastReset?: DatetimeValue4;
    [k: string]: unknown;
  };
  state?: State;
  anchor?: Anchor;
  /**
   * Time and Date from the GNSS Positioning System
   */
  datetime?: CommonValueFields & {
    /**
     * GNSS Time and Date in RFC 3339 (UTC only without local offset) format
     */
    value?: string;
    /**
     * Source of GNSS Date and Time
     */
    gnssTimeSource?: "GPS" | "GLONASS" | "Galileo" | "Beidou" | "IRNSS" | "Radio Signal" | "Internet" | "Local clock";
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Notifications currently raised. Major categories have well-defined names, but the tree can be extended by any hierarchical structure
 */
export interface Notifications2 {
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `Notifications2`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch3 | Notification10;
}
export interface NotificationBranch3 {
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `NotificationBranch`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch2`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch3`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch4`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch1 | Notification10;
}
/**
 * Design/dimensional data of this
 */
export interface Design2 {
  displacement?: NumberValue128;
  /**
   * The ais ship type see http://www.bosunsmate.org/ais/message5.php
   */
  aisShipType?: CommonValueFields & {
    value?: {
      /**
       * The ship type number
       */
      id?: number;
      /**
       * The ship type name
       */
      name?: string;
      [k: string]: unknown;
    } & (
      | {id: 20; name: "Wing In Ground"}
      | {id: 21; name: "Wing In Ground hazard cat A"}
      | {id: 22; name: "Wing In Ground hazard cat B"}
      | {id: 23; name: "Wing In Ground hazard cat C"}
      | {id: 24; name: "Wing In Ground hazard cat D"}
      | {id: 25; name: "Wing In Ground"}
      | {id: 26; name: "Wing In Ground"}
      | {id: 27; name: "Wing In Ground"}
      | {id: 28; name: "Wing In Ground"}
      | {id: 29; name: "Wing In Ground (no other information)"}
      | {id: 30; name: "Fishing"}
      | {id: 31; name: "Towing"}
      | {id: 32; name: "Towing exceeds 200m or wider than 25m"}
      | {id: 33; name: "Engaged in dredging or underwater operations"}
      | {id: 34; name: "Engaged in diving operations"}
      | {id: 35; name: "Engaged in military operations"}
      | {id: 36; name: "Sailing"}
      | {id: 37; name: "Pleasure"}
      | {id: 40; name: "High speed craft"}
      | {id: 41; name: "High speed craft carrying dangerous goods"}
      | {id: 42; name: "High speed craft hazard cat B"}
      | {id: 43; name: "High speed craft hazard cat C"}
      | {id: 44; name: "High speed craft hazard cat D"}
      | {id: 45; name: "High speed craft"}
      | {id: 46; name: "High speed craft"}
      | {id: 47; name: "High speed craft"}
      | {id: 48; name: "High speed craft"}
      | {id: 49; name: "High speed craft (no additional information)"}
      | {id: 50; name: "Pilot vessel"}
      | {id: 51; name: "SAR"}
      | {id: 52; name: "Tug"}
      | {id: 53; name: "Port tender"}
      | {id: 54; name: "Anti-pollution"}
      | {id: 55; name: "Law enforcement"}
      | {id: 56; name: "Spare"}
      | {id: 57; name: "Spare #2"}
      | {id: 58; name: "Medical"}
      | {id: 59; name: "RR Resolution No.18"}
      | {id: 60; name: "Passenger ship"}
      | {id: 61; name: "Passenger ship hazard cat A"}
      | {id: 62; name: "Passenger ship hazard cat B"}
      | {id: 63; name: "Passenger ship hazard cat C"}
      | {id: 64; name: "Passenger ship hazard cat D"}
      | {id: 65; name: "Passenger ship"}
      | {id: 66; name: "Passenger ship"}
      | {id: 67; name: "Passenger ship"}
      | {id: 68; name: "Passenger ship"}
      | {id: 69; name: "Passenger ship (no additional information)"}
      | {id: 70; name: "Cargo ship"}
      | {id: 71; name: "Cargo ship carrying dangerous goods"}
      | {id: 72; name: "Cargo ship hazard cat B"}
      | {id: 73; name: "Cargo ship hazard cat C"}
      | {id: 74; name: "Cargo ship hazard cat D"}
      | {id: 75; name: "Cargo ship"}
      | {id: 76; name: "Cargo ship"}
      | {id: 77; name: "Cargo ship"}
      | {id: 78; name: "Cargo ship"}
      | {id: 79; name: "Cargo ship (no additional information)"}
      | {id: 80; name: "Tanker"}
      | {id: 81; name: "Tanker carrying dangerous goods"}
      | {id: 82; name: "Tanker hazard cat B"}
      | {id: 83; name: "Tanker hazard cat C"}
      | {id: 84; name: "Tanker hazard cat D"}
      | {id: 85; name: "Tanker"}
      | {id: 86; name: "Tanker"}
      | {id: 87; name: "Tanker"}
      | {id: 88; name: "Tanker"}
      | {id: 89; name: "Tanker (no additional information)"}
      | {id: 90; name: "Other"}
      | {id: 91; name: "Other carrying dangerous goods"}
      | {id: 92; name: "Other hazard cat B"}
      | {id: 93; name: "Other hazard cat C"}
      | {id: 94; name: "Other hazard cat D"}
      | {id: 95; name: "Other"}
      | {id: 96; name: "Other"}
      | {id: 97; name: "Other"}
      | {id: 98; name: "Other"}
      | {id: 99; name: "Other (no additional information)"}
    );
    [k: string]: unknown;
  };
  draft?: Draft;
  length?: Length;
  keel?: Keel;
  beam?: NumberValue129;
  airHeight?: NumberValue130;
  rigging?: Rigging;
  [k: string]: unknown;
}
/**
 * Sensors, their state, and data.
 */
export interface Sensors2 {
  [k: string]: Sensor2;
}
/**
 * This regex pattern is used for validation UUID identifier for the sensor
 *
 * This interface was referenced by `Sensors2`'s JSON-Schema definition
 * via the `patternProperty` "(^[A-Za-z0-9]+$)".
 */
export interface Sensor2 {
  /**
   * The common name of the sensor
   */
  name?: string;
  /**
   * The datamodel definition of the sensor data. FIXME - need to create a definitions lib of sensor datamodel types
   */
  sensorType?: string;
  /**
   * The data of the sensor data. FIXME - need to ref the definitions of sensor types
   */
  sensorData?: string;
  fromBow?: NumberValue133;
  fromCenter?: NumberValue134;
  class?: StringValue3;
  [k: string]: unknown;
}
/**
 * Communication data including Radio, Telephone, E-Mail, etc.
 */
export interface Communication3 {
  /**
   * Callsign for VHF communication
   */
  callsignVhf?: string;
  /**
   * Callsign for HF communication
   */
  callsignHf?: string;
  /**
   * Phone number of skipper
   */
  phoneNumber?: string;
  /**
   * Email address to be used for HF email (Winmail, Airmail, Sailmail)
   */
  emailHf?: string;
  /**
   * Regular email for the skipper
   */
  email?: string;
  /**
   * Satellite phone number for vessel.
   */
  satPhoneNumber?: string;
  /**
   * Full name of the skipper of the vessel.
   */
  skipperName?: string;
  /**
   * Array with the names of the crew
   */
  crewNames?: [] | [string];
  [k: string]: unknown;
}
/**
 * Navigation data including Position, Course to next WP information, etc.
 */
export interface Navigation3 {
  lights?: NavigationLights;
  courseOverGroundMagnetic?: NumberValue38;
  courseOverGroundTrue?: NumberValue39;
  courseRhumbline?: Course;
  courseGreatCircle?: Course1;
  /**
   * Calculated values for other vessels, e.g. from AIS
   */
  closestApproach?: CommonValueFields & {
    value?: {
      /**
       * Closest Point of Approach (CPA), distance between own vessel and other vessel, based on current speeds, headings and positions
       */
      distance?: number;
      /**
       * Time to Closest Point of Approach (TCPA), between own vessel and other vessel, based on current speeds, headings and positions
       */
      timeTo?: number;
      [k: string]: unknown;
    };
    values?: {
      /**
       * This interface was referenced by `undefined`'s JSON-Schema definition
       * via the `patternProperty` ".*".
       */
      [k: string]: {
        /**
         * RFC 3339 (UTC only without local offset) string representing date and time.
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
         *
         * This interface was referenced by `undefined`'s JSON-Schema definition
         * via the `patternProperty` "[0-9]*".
         */
        timestamp?: string;
        pgn?: number;
        sentence?: string;
        value?: {
          distance?: number;
          timeTo?: number;
          [k: string]: unknown;
        };
        [k: string]: unknown;
      };
    };
    [k: string]: unknown;
  };
  /**
   * Specific navigational data related to yacht racing.
   */
  racing?: {
    startLineStb?: Position2;
    startLinePort?: Position3;
    distanceStartline?: NumberValue49;
    timeToStart?: NumberValue50;
    timePortDown?: NumberValue51;
    timePortUp?: NumberValue52;
    timeStbdDown?: NumberValue53;
    timeStbdUp?: NumberValue54;
    /**
     * The layline crossing the current course
     */
    layline?: {
      distance?: NumberValue55;
      time?: NumberValue56;
      [k: string]: unknown;
    };
    /**
     * The layline parallell to current course
     */
    oppositeLayline?: {
      distance?: NumberValue57;
      time?: NumberValue58;
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  magneticVariation?: NumberValue59;
  magneticVariationAgeOfService?: NumberValue60;
  destination?: Destination;
  gnss?: Gnss;
  headingMagnetic?: NumberValue68;
  magneticDeviation?: NumberValue69;
  headingCompass?: NumberValue70;
  headingTrue?: NumberValue71;
  position?: Position4;
  attitude?: Attitude;
  /**
   * Special maneuver such as regional passing arrangement. (from ais)
   */
  maneuver?: CommonValueFields & string;
  rateOfTurn?: NumberValue72;
  speedOverGround?: NumberValue73;
  speedThroughWater?: NumberValue74;
  speedThroughWaterTransverse?: NumberValue75;
  speedThroughWaterLongitudinal?: NumberValue76;
  leewayAngle?: NumberValue77;
  log?: NumberValue78;
  /**
   * Trip data
   */
  trip?: {
    log?: NumberValue79;
    lastReset?: DatetimeValue4;
    [k: string]: unknown;
  };
  state?: State;
  anchor?: Anchor;
  /**
   * Time and Date from the GNSS Positioning System
   */
  datetime?: CommonValueFields & {
    /**
     * GNSS Time and Date in RFC 3339 (UTC only without local offset) format
     */
    value?: string;
    /**
     * Source of GNSS Date and Time
     */
    gnssTimeSource?: "GPS" | "GLONASS" | "Galileo" | "Beidou" | "IRNSS" | "Radio Signal" | "Internet" | "Local clock";
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Notifications currently raised. Major categories have well-defined names, but the tree can be extended by any hierarchical structure
 */
export interface Notifications3 {
  mob?: Notification11;
  fire?: Notification12;
  sinking?: Notification13;
  flooding?: Notification14;
  collision?: Notification15;
  grounding?: Notification16;
  listing?: Notification17;
  adrift?: Notification18;
  piracy?: Notification19;
  abandon?: Notification20;
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `Notifications3`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch4 | Notification10;
}
export interface NotificationBranch4 {
  /**
   * This regex pattern is used for validation of the path of the alarm
   *
   * This interface was referenced by `NotificationBranch`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch2`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch3`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   *
   * This interface was referenced by `NotificationBranch4`'s JSON-Schema definition
   * via the `patternProperty` "(^((?!^mob$|^fire$|^sinking$|^flooding$|^collision$|^grounding$|^listing$|^adrift$|^piracy$|^abandon$)[A-Za-z0-9-])+$)".
   */
  [k: string]: NotificationBranch1 | Notification10;
}
/**
 * Metadata about the data sources; physical interface, address, protocol, etc.
 */
export interface Sources {
  /**
   * This interface was referenced by `Sources`'s JSON-Schema definition
   * via the `patternProperty` ".*".
   */
  [k: string]: {
    /**
     * Sources unique name e.g. [type-bus].[id], N2000-01.034
     */
    label?: string;
    /**
     * Type of interface i.e. signalk, NMEA0183 or NMEA2000
     */
    type?: string;
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".*".
     */
    [k: string]:
      | {
          /**
           * AIS data
           */
          ais?: {
            /**
             * AIS Message Type
             */
            aisType?: number;
            [k: string]: unknown;
          };
          /**
           * NMEA 0183 talker id, the GP in $GPRMC..
           */
          talker?: string;
          /**
           * NMEA 0183 sentences
           */
          sentences?: {
            /**
             * RFC 3339 (UTC only without local offset) string representing date and time.
             *
             * This interface was referenced by `undefined`'s JSON-Schema definition
             * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
             *
             * This interface was referenced by `undefined`'s JSON-Schema definition
             * via the `patternProperty` "[0-9]*".
             */
            [k: string]: string;
          };
          n2k?: {
            /**
             * NMEA 2000 bus
             */
            src?: string;
            /**
             * NMEA 2000 pgn number
             */
            pgns?: {
              /**
               * RFC 3339 (UTC only without local offset) string representing date and time.
               *
               * This interface was referenced by `undefined`'s JSON-Schema definition
               * via the `patternProperty` "^[A-Z][A-Z][A-Z]$".
               *
               * This interface was referenced by `undefined`'s JSON-Schema definition
               * via the `patternProperty` "[0-9]*".
               */
              [k: string]: string;
            };
            /**
             * Manufacturer numeric NMEA 2000 id
             */
            manufacturerId?: number;
            /**
             * Manufacturer of the source device
             */
            manufacturerName?: string;
            /**
             * Unique id of the source device
             */
            uniqueId?: number;
            /**
             * NMEA 2000 Device Function code
             */
            deviceFunction?: number;
            /**
             * NMEA 2000 Device Class code
             */
            deviceClass?: number;
            /**
             * Manufactures assigned NMEA2000 Product ID
             */
            productID?: number;
            /**
             * Product Name or Model Number
             */
            productName?: string;
            /**
             * Version of the device's Software/Firmware
             */
            softwareVersion?: string;
            /**
             * Version of the device's Hardware
             */
            hardwareVersion?: string;
            /**
             * Device's Serial Number
             */
            serialNumber?: string;
            /**
             * Product Installation Note 1 i.e. 'Wired on Navigation Switch/Circuit'
             */
            installationNote1?: string;
            /**
             * Product Installation Note 2 i.e. 'Located under forward bunk'
             */
            installationNote2?: string;
            /**
             * Manufacturer's Info i.e. 'http://digitalyachtamerica.com Tel:+44 1179 554474'
             */
            manufacturerInfo?: string;
            [k: string]: unknown;
          };
          [k: string]: unknown;
        }
      | {
          /**
           * This interface was referenced by `undefined`'s JSON-Schema definition
           * via the `patternProperty` ".*".
           */
          [k: string]: {
            [k: string]: unknown;
          };
        };
  };
}
/**
 * Resources to aid in navigation and operation of the vessel including waypoints, routes, notes, etc.
 */
export interface Resources {
  charts?: Chart;
  routes?: Route;
  notes?: Notes;
  regions?: Region;
  waypoints?: Waypoints;
  [k: string]: unknown;
}
/**
 * A holder for charts, each named with their chart code
 */
export interface Chart {
  /**
   * A chart
   *
   * This interface was referenced by `Chart`'s JSON-Schema definition
   * via the `patternProperty` "(^[A-Za-z0-9_-]{8,}$)".
   */
  [k: string]: {
    /**
     * Chart common name
     */
    name?: string;
    /**
     * Chart number
     */
    identifier?: string;
    /**
     * A description of the chart
     */
    description?: string;
    /**
     * A url to the tilemap of the chart for use in TMS chartplotting apps
     */
    tilemapUrl?: string;
    /**
     * Region related to note. A pointer to a region UUID. Alternative to geohash
     */
    region?: string;
    /**
     * Position related to chart. Alternative to region
     */
    geohash?: string;
    /**
     * A url to the chart file's storage location
     */
    chartUrl?: string;
    /**
     * The scale of the chart, the larger number from 1:200000
     */
    scale?: number;
    /**
     * If the chart format is WMS, the layers enabled for the chart.
     */
    chartLayers?: string[];
    /**
     * The bounds of the chart. An array containing the position of the upper left corner, and the lower right corner. Useful when the chart isn't inherently geo-referenced.
     */
    bounds?: Position6[];
    /**
     * The format of the chart
     */
    chartFormat?:
      | "gif"
      | "geotiff"
      | "kap"
      | "png"
      | "jpg"
      | "kml"
      | "wkt"
      | "topojson"
      | "geojson"
      | "gpx"
      | "tms"
      | "wms"
      | "S-57"
      | "S-63"
      | "svg"
      | "other";
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     */
    timestamp?: string;
    source?: Source3;
    [k: string]: unknown;
  };
}
/**
 * Source of data in delta format, a record of where the data was received from. An object containing at least the properties defined in 'properties', but can contain anything beyond that.
 */
export interface Source3 {
  /**
   * A label to identify the source bus, eg serial-COM1, eth-local,etc . Can be anything but should follow a predicatable format
   */
  label: string;
  /**
   * A human name to identify the type. NMEA0183, NMEA2000, signalk
   */
  type?: string;
  /**
   * NMEA2000 src value or any similar value for encapsulating the original source of the data
   */
  src?: string;
  /**
   * NMEA2000 can name of the source device
   */
  canName?: string;
  /**
   * NMEA2000 pgn of the source message
   */
  pgn?: number;
  /**
   * NMEA2000 instance value of the source message
   */
  instance?: string;
  /**
   * Sentence type of the source NMEA0183 sentence, $GP[RMC],092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  sentence?: string;
  /**
   * Talker id of the source NMEA0183 sentence, $[GP]RMC,092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  talker?: string;
  /**
   * AIS Message Type
   */
  aisType?: number;
  [k: string]: unknown;
}
/**
 * A holder for routes, each named with a UUID
 */
export interface Route {
  /**
   * A route, named with a UUID
   *
   * This interface was referenced by `Route`'s JSON-Schema definition
   * via the `patternProperty` "^urn:mrn:signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$".
   */
  [k: string]: {
    /**
     * Route's common name
     */
    name?: string;
    /**
     * A description of the route
     */
    description?: string;
    /**
     * Total distance from start to end
     */
    distance?: number;
    /**
     * The waypoint UUID at the start of the route
     */
    start?: string;
    /**
     * The waypoint UUID at the end of the route
     */
    end?: string;
    feature?: Feature;
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     */
    timestamp?: string;
    source?: Source4;
    [k: string]: unknown;
  };
}
/**
 * A Geo JSON feature object which describes the route between the waypoints
 */
export interface Feature {
  type?: "Feature";
  geometry: LineString;
  /**
   * Additional data of any type
   */
  properties: {
    [k: string]: unknown;
  } | null;
  id?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface LineString {
  type?: "LineString";
  /**
   * An array of two or more positions
   */
  coordinates?: PositionArray & {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Source of data in delta format, a record of where the data was received from. An object containing at least the properties defined in 'properties', but can contain anything beyond that.
 */
export interface Source4 {
  /**
   * A label to identify the source bus, eg serial-COM1, eth-local,etc . Can be anything but should follow a predicatable format
   */
  label: string;
  /**
   * A human name to identify the type. NMEA0183, NMEA2000, signalk
   */
  type?: string;
  /**
   * NMEA2000 src value or any similar value for encapsulating the original source of the data
   */
  src?: string;
  /**
   * NMEA2000 can name of the source device
   */
  canName?: string;
  /**
   * NMEA2000 pgn of the source message
   */
  pgn?: number;
  /**
   * NMEA2000 instance value of the source message
   */
  instance?: string;
  /**
   * Sentence type of the source NMEA0183 sentence, $GP[RMC],092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  sentence?: string;
  /**
   * Talker id of the source NMEA0183 sentence, $[GP]RMC,092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  talker?: string;
  /**
   * AIS Message Type
   */
  aisType?: number;
  [k: string]: unknown;
}
/**
 * A holder for notes about regions, each named with a UUID. Notes might include navigation or cruising info, images, or anything
 */
export interface Notes {
  /**
   * A note about a region, named with a UUID. Notes might include navigation or cruising info, images, or anything
   *
   * This interface was referenced by `Notes`'s JSON-Schema definition
   * via the `patternProperty` "^urn:mrn:signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$".
   */
  [k: string]: {
    /**
     * Note's common name
     */
    title?: string;
    /**
     * A textual description of the note
     */
    description?: string;
    /**
     * Region related to note. A pointer to a region UUID. Alternative to position or geohash
     */
    region?: string;
    position?: Position8;
    /**
     * Position related to note. Alternative to region or position
     */
    geohash?: string;
    /**
     * MIME type of the note
     */
    mimeType?: string;
    /**
     * Location of the note
     */
    url?: string;
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     */
    timestamp?: string;
    source?: Source5;
    [k: string]: unknown;
  };
}
/**
 * Source of data in delta format, a record of where the data was received from. An object containing at least the properties defined in 'properties', but can contain anything beyond that.
 */
export interface Source5 {
  /**
   * A label to identify the source bus, eg serial-COM1, eth-local,etc . Can be anything but should follow a predicatable format
   */
  label: string;
  /**
   * A human name to identify the type. NMEA0183, NMEA2000, signalk
   */
  type?: string;
  /**
   * NMEA2000 src value or any similar value for encapsulating the original source of the data
   */
  src?: string;
  /**
   * NMEA2000 can name of the source device
   */
  canName?: string;
  /**
   * NMEA2000 pgn of the source message
   */
  pgn?: number;
  /**
   * NMEA2000 instance value of the source message
   */
  instance?: string;
  /**
   * Sentence type of the source NMEA0183 sentence, $GP[RMC],092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  sentence?: string;
  /**
   * Talker id of the source NMEA0183 sentence, $[GP]RMC,092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  talker?: string;
  /**
   * AIS Message Type
   */
  aisType?: number;
  [k: string]: unknown;
}
/**
 * A holder for regions, each named with UUID
 */
export interface Region {
  /**
   * A region of interest, each named with a UUID
   *
   * This interface was referenced by `Region`'s JSON-Schema definition
   * via the `patternProperty` "^urn:mrn:signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$".
   */
  [k: string]: {
    /**
     * geohash of the approximate boundary of this region
     */
    geohash?: {
      [k: string]: unknown;
    };
    feature?: Feature1;
    /**
     * RFC 3339 (UTC only without local offset) string representing date and time.
     */
    timestamp?: string;
    source?: Source6;
    [k: string]: unknown;
  };
}
/**
 * A Geo JSON feature object which describes the regions boundary
 */
export interface Feature1 {
  type?: "Feature";
  geometry: Polygon | MultiPolygon;
  /**
   * Additional data of any type
   */
  properties: {
    [k: string]: unknown;
  } | null;
  id?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface Polygon {
  type?: "Polygon";
  coordinates?: Polygon1;
  [k: string]: unknown;
}
export interface MultiPolygon {
  type?: "MultiPolygon";
  coordinates?: Polygon1[];
  [k: string]: unknown;
}
/**
 * Source of data in delta format, a record of where the data was received from. An object containing at least the properties defined in 'properties', but can contain anything beyond that.
 */
export interface Source6 {
  /**
   * A label to identify the source bus, eg serial-COM1, eth-local,etc . Can be anything but should follow a predicatable format
   */
  label: string;
  /**
   * A human name to identify the type. NMEA0183, NMEA2000, signalk
   */
  type?: string;
  /**
   * NMEA2000 src value or any similar value for encapsulating the original source of the data
   */
  src?: string;
  /**
   * NMEA2000 can name of the source device
   */
  canName?: string;
  /**
   * NMEA2000 pgn of the source message
   */
  pgn?: number;
  /**
   * NMEA2000 instance value of the source message
   */
  instance?: string;
  /**
   * Sentence type of the source NMEA0183 sentence, $GP[RMC],092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  sentence?: string;
  /**
   * Talker id of the source NMEA0183 sentence, $[GP]RMC,092750.000,A,5321.6802,N,00630.3372,W,0.02,31.66,280511,,,A*43
   */
  talker?: string;
  /**
   * AIS Message Type
   */
  aisType?: number;
  [k: string]: unknown;
}
/**
 * A holder for waypoints, each named with a UUID
 */
export interface Waypoints {
  [k: string]: Waypoint;
}
/**
 * A waypoint, named with a UUID
 *
 * This interface was referenced by `Waypoints`'s JSON-Schema definition
 * via the `patternProperty` "^urn:mrn:signalk:uuid:[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-4[0-9A-Fa-f]{3}-[89ABab][0-9A-Fa-f]{3}-[0-9A-Fa-f]{12}$".
 */
export interface Waypoint {
  position?: Position9;
  feature?: Feature2;
  [k: string]: unknown;
}
/**
 * A Geo JSON feature object
 */
export interface Feature2 {
  type?: "Feature";
  geometry: Point;
  /**
   * Additional data of any type
   */
  properties: {
    [k: string]: unknown;
  } | null;
  id?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
export interface Point {
  type?: "Point";
  /**
   * A single position, in x,y order (Lon, Lat)
   *
   * @minItems 2
   */
  coordinates?: [number, number];
  [k: string]: unknown;
}
